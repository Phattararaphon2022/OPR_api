IF NOT EXISTS (SELECT * FROM sysobjects WHERE name = 'PAY_TR_PAYPF') 
BEGIN 

CREATE TABLE [dbo].[PAY_TR_PAYPF](
	[COMPANY_CODE] [varchar](5) NOT NULL,
	[WORKER_CODE] [varchar](15) NOT NULL,
	[PROVIDENT_CODE] [varchar](10) NOT NULL,
	[PAYPF_DATE] [datetime] NOT NULL,
	[PAYPF_EMP_RATE] [decimal](5, 2) NOT NULL,
	[PAYPF_EMP_AMOUNT] [decimal](12, 2) NOT NULL,
	[PAYPF_COM_RATE] [decimal](5, 2) NOT NULL,
	[PAYPF_COM_AMOUNT] [decimal](12, 2) NOT NULL,
	[CREATED_BY] [varchar](20) NOT NULL,
	[CREATED_DATE] [datetime] NOT NULL,
	[MODIFIED_BY] [varchar](20) NULL,
	[MODIFIED_DATE] [datetime] NULL,
	[FLAG] [bit] NOT NULL,
 CONSTRAINT [PK_PAY_TR_PAYPF] PRIMARY KEY CLUSTERED 
(
	[COMPANY_CODE] ASC,
	[WORKER_CODE] ASC,
	[PROVIDENT_CODE] ASC,
	[PAYPF_DATE] ASC
))

END
GO


IF NOT EXISTS (SELECT * FROM sysobjects WHERE name = 'PAY_TR_PAYTAXWITHHOLDING') 
BEGIN 

CREATE TABLE [dbo].[PAY_TR_PAYTAXWITHHOLDING](
	[COMPANY_CODE] [varchar](5) NOT NULL,
	[WORKER_CODE] [varchar](15) NOT NULL,
	[PAYTAXWITHHOLDING_DATE] [datetime] NOT NULL,
	[PAYTAXWITHHOLDING_AMOUNT] [decimal](12, 2) NOT NULL,
	[PAYTAXWITHHOLDING_TAX] [decimal](8, 2) NOT NULL,
	[CREATED_BY] [varchar](20) NOT NULL,
	[CREATED_DATE] [datetime] NOT NULL,
	[MODIFIED_BY] [varchar](20) NULL,
	[MODIFIED_DATE] [datetime] NULL,
	[FLAG] [bit] NOT NULL,
 CONSTRAINT [PK_PAY_TR_PAYTAXWITHHOLDING] PRIMARY KEY CLUSTERED 
(
	[COMPANY_CODE] ASC,
	[WORKER_CODE] ASC,
	[PAYTAXWITHHOLDING_DATE] ASC
))
END
GO


IF NOT EXISTS (SELECT * FROM sysobjects WHERE name = 'PAY_TR_PAYBANK') 
BEGIN 

CREATE TABLE [dbo].[PAY_TR_PAYBANK](
	[COMPANY_CODE] [varchar](5) NOT NULL,
	[WORKER_CODE] [varchar](15) NOT NULL,
	[PAYBANK_PAYDATE] [datetime] NOT NULL,
	[PAYBANK_BANKACCOUNT] [varchar](20) NOT NULL,
	[PAYBANK_BANKCODE] [varchar](10) NULL,
	[PAYBANK_AMOUNT] [decimal](12, 2) NOT NULL,
	[CREATED_BY] [varchar](20) NOT NULL,
	[CREATED_DATE] [datetime] NOT NULL,
	[MODIFIED_BY] [varchar](20) NULL,
	[MODIFIED_DATE] [datetime] NULL,
	[FLAG] [bit] NOT NULL,
 CONSTRAINT [PK_PAY_TR_PAYBANK] PRIMARY KEY CLUSTERED 
(
	[COMPANY_CODE] ASC,
	[WORKER_CODE] ASC,
	[PAYBANK_PAYDATE] ASC
))
END
GO

IF NOT EXISTS (SELECT * FROM sysobjects WHERE name = 'PAY_TR_PAYREDUCE') 
BEGIN 

CREATE TABLE [dbo].[PAY_TR_PAYREDUCE](
	[COMPANY_CODE] [varchar](5) NOT NULL,
	[WORKER_CODE] [varchar](15) NOT NULL,
	[PAYREDUCE_PAYDATE] [datetime] NOT NULL,
	[REDUCE_CODE] [varchar](5) NOT NULL,
	[PAYREDUCE_AMOUNT] [decimal](10, 2) NOT NULL,
 CONSTRAINT [PK_PAY_TR_PAYREDUCE] PRIMARY KEY CLUSTERED 
(
	[COMPANY_CODE] ASC,
	[WORKER_CODE] ASC,
	[PAYREDUCE_PAYDATE] ASC,
	[REDUCE_CODE] ASC
))
END
GO

IF EXISTS(SELECT * FROM sysobjects WHERE name = 'ATT_FNT_GETSALARY') 
BEGIN 
	DROP FUNCTION ATT_FNT_GETSALARY 
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATT_FNT_GETSALARY]
(
    @CompanyCode varchar (5), @WorkerCode varchar (15), @FromDate datetime, @ToDate datetime, @PayDate datetime
)
RETURNS @SALARY TABLE 
(
	Salary decimal(12, 2), Working decimal(5, 2)
) 
AS
BEGIN 

	DECLARE @company_code varchar (5) = @CompanyCode
	DECLARE @worker_code varchar (15) = @WorkerCode
	DECLARE @period_from datetime = @FromDate
	DECLARE @period_to datetime = @ToDate
	DECLARE @period_pay datetime = @PayDate

	
	DECLARE @salary_amount decimal(12, 2) = 0
	DECLARE @salary_quantity decimal(5, 2) = 0

	-- Get worker type
	DECLARE @worker_emptype varchar (1)
	DECLARE @worker_hiredate datetime
	DECLARE @worker_resigndate datetime
	SELECT TOP 1 @worker_emptype = ISNULL(WORKER_TYPE, 'M'), @worker_hiredate = WORKER_HIREDATE, @worker_resigndate = ISNULL(WORKER_RESIGNDATE, '01/01/2999') FROM EMP_MT_WORKER WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code
					
	DECLARE @period_day int = 0
	DECLARE @working int = 0
	SELECT @period_day=DATEDIFF(day, @period_from, @period_to) + 1 

	DECLARE @working_from datetime = @period_from
	DECLARE @working_to datetime = @period_to

	-- Start date
	IF @worker_hiredate > @working_from BEGIN
		SET @working_from = @worker_hiredate
	END

	-- Resign date
	IF @worker_resigndate < @working_to BEGIN
		SET @working_to = DATEADD(DAY, -1, @worker_resigndate)
	END
						
	IF @working_to < @working_from BEGIN
		SET @working_to = DATEADD(DAY, -1, @working_from)
	END
					
	-- Get current salary
	DECLARE @salary_effdate datetime 
	DECLARE @salary_current decimal(12, 2) = 0
	SELECT TOP 1 @salary_current = ISNULL(EMPSALARY_AMOUNT, 0), @salary_effdate = EMPSALARY_DATE FROM EMP_TR_SALARY WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code AND EMPSALARY_DATE <= @period_pay 
	ORDER BY EMPSALARY_DATE DESC

	DECLARE @salary_old decimal (12, 2) = 0
	DECLARE @salary_perday decimal (12, 2) = 0
										
	IF @worker_emptype = 'M' BEGIN
		-- Check adjustment
		IF @salary_effdate > @working_from BEGIN

										
			SELECT TOP 1 @salary_old = ISNULL(EMPSALARY_AMOUNT, 0) FROM EMP_TR_SALARY WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code AND EMPSALARY_DATE <= DATEADD(DAY, -1, @salary_effdate) 
			ORDER BY EMPSALARY_DATE DESC

			IF @salary_old > 0 AND @salary_current <> @salary_old  BEGIN
								
				-- Salary Old
				SET @salary_perday = @salary_old / @period_day		
				SELECT @working=DATEDIFF(day, @working_from, @salary_effdate)

				--PRINT 'Salary (Old) perday : ' + CAST(@salary_perday AS varchar) + ' (' + CAST(@working AS varchar) + ')'

				SET @salary_amount = @salary_perday * @working

				-- Salary New
				SET @salary_perday = @salary_current / @period_day		
				SELECT @working=DATEDIFF(day, @salary_effdate, @working_to) + 1

				--PRINT 'Salary (New) perday : ' + CAST(@salary_perday AS varchar) + ' (' + CAST(@working AS varchar) + ')'

				SET @salary_amount = @salary_amount + @salary_perday * @working

				--SELECT @working=DATEDIFF(day, @working_from, @working_to) + 1 
				--SET @salary_quantity = @working
			END
			ELSE BEGIN
							
				SET @salary_amount = @salary_current
				SELECT @working=DATEDIFF(day, @working_from, @working_to) + 1 
				--SET @salary_quantity = @working
				-- Check not full period
				IF @working <> @period_day BEGIN
				
					SET @salary_perday = @salary_current / 30

					SET @salary_amount = @salary_perday * @working
					

				END
							
			END

		END
		ELSE BEGIN
							
			SET @salary_amount = @salary_current
			SELECT @working=DATEDIFF(day, @working_from, @working_to) + 1 
			--SET @salary_quantity = @working

			-- Check not full period
			IF @working <> @period_day BEGIN
				
				SET @salary_perday = @salary_current / 30

				SET @salary_amount = @salary_perday * @working			

			END
							
		END

		SELECT @working=DATEDIFF(day, @working_from, @working_to) + 1 
	    SET @salary_quantity = @working

		-- Round
		--SELECT @salary_amount=Result FROM HRM_FNT_ROUNDSALARY(@salary_amount)
						
	END
	ELSE BEGIN
		-- Daily											

		IF @salary_effdate > @working_from BEGIN

			SET @salary_amount = 0
			SET @working = 0
										
			-- loop day
			DECLARE @timecard_workdate datetime
			DECLARE cur_day CURSOR FOR 
			SELECT TIMECARD_WORKDATE
			FROM ATT_TR_TIMECARD
			WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code						
			AND TIMECARD_DAYTYPE = 'N'
			AND TIMECARD_WORKDATE BETWEEN @period_from AND @period_to
			AND (TIMECARD_WORK1_MIN_APP > 0 OR TIMECARD_WORK1_MIN_APP > 0)

			OPEN cur_day 
				FETCH NEXT FROM cur_day INTO @timecard_workdate
				WHILE @@FETCH_STATUS = 0 
				BEGIN 
									
					SELECT TOP 1 @salary_old = ISNULL(EMPSALARY_AMOUNT, 0) FROM EMP_TR_SALARY WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code AND EMPSALARY_DATE <= @timecard_workdate 
					ORDER BY EMPSALARY_DATE DESC

					IF @salary_old > 0 BEGIN

						SET @salary_amount = @salary_amount + @salary_old

					END

					SET @working = @working + 1
									
				FETCH NEXT FROM cur_day INTO @timecard_workdate
				END 
			CLOSE cur_day 
			DEALLOCATE cur_day

			SET @salary_quantity = @working		

		END
		ELSE BEGIN

			-- Get normal day
			SELECT @working = ISNULL(COUNT(TIMECARD_WORKDATE), 0) FROM ATT_TR_TIMECARD
			WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code						
			AND TIMECARD_DAYTYPE = 'N'
			AND TIMECARD_WORKDATE BETWEEN @period_from AND @period_to
			AND (TIMECARD_WORK1_MIN_APP > 0 OR TIMECARD_WORK1_MIN_APP > 0)
							
			SET @salary_amount = @salary_current * @working
			SET @salary_quantity = @working														
							
		END

		-- Round
		--SELECT @salary_amount=Result FROM HRM_FNT_ROUNDSALARY(@salary_amount)
											   
	END

	
	INSERT INTO @SALARY VALUES(@salary_amount, @salary_quantity)
	RETURN
END
GO


IF EXISTS(SELECT * FROM sysobjects WHERE name = 'ATT_FNT_ROUND_AMOUNT') 
BEGIN 
	DROP FUNCTION ATT_FNT_ROUND_AMOUNT 
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [dbo].[ATT_FNT_ROUND_AMOUNT]
(
	@CompID varchar(10),
	@Amount decimal (12, 3),
	@Type varchar(10)
)
RETURNS @Round TABLE 
(
	Result decimal (12, 2)
)      
AS
BEGIN

	----DECLARE @CompID varchar(10) = 'APT'
	----DECLARE @Amount decimal (12, 3) = '15000.30'
	----DECLARE @Type varchar(5) = 'TAX'
	----DECLARE @Output decimal (12, 3) = '15000.30'
		
	DECLARE @ROUND_CODE varchar(10) = ''

	SELECT @ROUND_CODE = CASE @Type
	WHEN 'PF' THEN ISNULL(POLROUND_PF, '')
	WHEN 'SSO' THEN ISNULL(POLROUND_SSO, '')
	WHEN 'TAX' THEN ISNULL(POLROUND_TAX, '')
	WHEN 'WAGE_DAY' THEN ISNULL(POLROUND_WAGE_DAY, '')
	WHEN 'WAGE_SUMMARY' THEN ISNULL(POLROUND_WAGE_SUMMARY, '')
	WHEN 'OT_DAY' THEN ISNULL(POLROUND_OT_DAY, '')
	WHEN 'OT_SUMMARY' THEN ISNULL(POLROUND_OT_SUMMARY, '')
	WHEN 'ABSENT' THEN ISNULL(POLROUND_ABSENT, '')
	WHEN 'LATE' THEN ISNULL(POLROUND_LATE, '')
	WHEN 'LEAVE' THEN ISNULL(POLROUND_LEAVE, '')
	WHEN 'NETPAY' THEN ISNULL(POLROUND_NETPAY, '')
		
	END
	FROM [SYS_MT_POLROUND]
	WHERE COMPANY_CODE=@CompID

	----PRINT 'Input:' + CAST(@Amount AS VARCHAR(30))

	----PRINT 'Round type:' + @ROUND_CODE
	
	DECLARE @output_amount decimal (12, 2) = @Amount

	IF @ROUND_CODE <> '' BEGIN
		DECLARE @amount_int int
	
		DECLARE @round_value decimal (4, 2)
		DECLARE @point decimal (4, 3)

		-- Convert to Int
		SET @amount_int = CAST(ROUND(@Amount, 3, 1) AS INT)

		-- Get decimal point
		SET @point = ROUND(@Amount, 3, 1) - @amount_int

		SET @round_value = 0
		SET @output_amount = ROUND(@Amount, 3, 1)

		--SELECT TOP 1 @round_value=ISNULL(ROUND_RESULT, 0) 
		--FROM HRM_MT_ROUND 
		--INNER JOIN HRM_TR_ROUND ON HRM_MT_ROUND.ROUND_ID=HRM_TR_ROUND.ROUND_ID
		--WHERE HRM_MT_ROUND.ROUND_CODE = @ROUND_CODE
		--AND (@point BETWEEN ROUND_FROM AND ROUND_TO)

		SELECT TOP 1 @round_value=ISNULL(ROUNDS_RESULT, 0) 
		FROM SYS_MT_ROUNDS 		
		WHERE SYS_MT_ROUNDS.ROUNDS_CODE = @ROUND_CODE
		AND (@point BETWEEN ROUNDS_FROM AND ROUNDS_TO)

		SET @output_amount = @amount_int + @round_value

		--PRINT 'Output:' + CAST(@output_amount AS VARCHAR(30))
	END

	INSERT INTO @Round VALUES(@output_amount)
	RETURN

END

GO

IF EXISTS(SELECT * FROM sysobjects WHERE name = 'EMP_FNT_GETWORKAGE') 
BEGIN 
	DROP FUNCTION EMP_FNT_GETWORKAGE 
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [dbo].[EMP_FNT_GETWORKAGE]
(
    @CompanyCode varchar (30), @WorkerCode varchar (30), @PeriodPay datetime
)
RETURNS decimal(6, 3) 
AS
BEGIN 

	DECLARE @output decimal (6, 3) = 0

	DECLARE @startdate datetime

	SELECT @startdate = WORKER_HIREDATE FROM EMP_MT_WORKER
	WHERE COMPANY_CODE = @CompanyCode AND WORKER_CODE = @WorkerCode

	DECLARE @Temp decimal(18, 2)      
    SET @Temp = DATEDIFF(day, @startdate, @PeriodPay)     

	SET @output = @Temp / 365.00

	RETURN @output
END
GO


IF EXISTS(SELECT * FROM sysobjects WHERE name = 'PAY_FNT_GETEMPREDUCE') 
BEGIN 
	DROP FUNCTION PAY_FNT_GETEMPREDUCE 
END 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [dbo].[PAY_FNT_GETEMPREDUCE]
(
    @CompanyCode varchar (30), @WorkerCode varchar (30), @PeriodPay datetime, @EstimateAmount decimal(10, 2), @Language varchar(2)
)
RETURNS @Reduce TABLE 
(
	ReduceID varchar(5), ReduceDetail varchar(100), ReduceAmount decimal(10, 2)
) 
AS
BEGIN    

	DECLARE @reduce_id varchar(5)
	DECLARE @reduce_detail_th varchar(100)
	DECLARE @reduce_detail_en varchar(100)
	DECLARE @empreduce_amount decimal (15, 2)
	DECLARE @reduce_amount decimal (15, 2)
	DECLARE @reduce_percent decimal (15, 2)
	DECLARE @reduce_percent_max decimal (15, 2)

	DECLARE @reduce_detail varchar(100)
	
	DECLARE cur_reduce CURSOR FOR 
	SELECT EMP_TR_REDUCE.REDUCE_TYPE, EMP_TR_REDUCE.EMPREDUCE_AMOUNT, SYS_MT_REDUCE.REDUCE_AMOUNT, SYS_MT_REDUCE.REDUCE_PERCENT, SYS_MT_REDUCE.REDUCE_PERCENT_MAX
	, ISNULL(SYS_MT_REDUCE.REDUCE_NAME_TH, ''), ISNULL(SYS_MT_REDUCE.REDUCE_NAME_EN, '') 
	FROM EMP_TR_REDUCE
	INNER JOIN SYS_MT_REDUCE ON EMP_TR_REDUCE.REDUCE_TYPE=SYS_MT_REDUCE.REDUCE_CODE
	WHERE EMP_TR_REDUCE.WORKER_CODE=@WorkerCode
	AND EMP_TR_REDUCE.CREATED_DATE >= @PeriodPay

	OPEN cur_reduce 
		FETCH NEXT FROM cur_reduce INTO @reduce_id, @empreduce_amount, @reduce_amount, @reduce_percent, @reduce_percent_max, @reduce_detail_th, @reduce_detail_en
		WHILE @@FETCH_STATUS = 0 
		BEGIN 

			IF @reduce_percent > 0 BEGIN
				
				SET @reduce_amount = (@EstimateAmount * @reduce_percent / 100)

				IF @reduce_amount > @reduce_percent_max BEGIN
					SET @reduce_amount = @reduce_percent_max
				END

				IF @empreduce_amount > @reduce_amount BEGIN
					SET @empreduce_amount = @reduce_amount
				END

			END
			ELSE BEGIN
							
				IF @empreduce_amount > @reduce_amount BEGIN
					SET @empreduce_amount = @reduce_amount
				END

			END

			IF @Language='TH' BEGIN
				SET @reduce_detail = @reduce_detail_th
			END
			ELSE BEGIN
				SET @reduce_detail = @reduce_detail_en
			END

			INSERT INTO @Reduce VALUES(@reduce_id, @reduce_detail, @empreduce_amount)

			FETCH NEXT FROM cur_reduce INTO @reduce_id, @empreduce_amount, @reduce_amount, @reduce_percent, @reduce_percent_max, @reduce_detail_th, @reduce_detail_en
		END 
	CLOSE cur_reduce 
	DEALLOCATE cur_reduce	 

	
	RETURN 
END
GO


IF EXISTS(SELECT * FROM sysobjects WHERE name = 'PAY_FNT_GETSSO') 
BEGIN 
	DROP FUNCTION PAY_FNT_GETSSO 
END 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[PAY_FNT_GETSSO]
(
    @CompanyCode varchar (30), @WorkerCode varchar (30), @PeriodPay datetime, @CalAmount decimal(12, 2)
)
RETURNS @SSO TABLE 
(
	SSOEmpRate decimal(5, 2), SSOEmpAmount decimal(8, 2), SSOComRate decimal(5, 2), SSOComAmount decimal(8, 2)
) 
AS
BEGIN 

	DECLARE @cal_amount decimal (12, 2) = @CalAmount

	IF @cal_amount > 15000 BEGIN
		SET @cal_amount = 15000
	END

	DECLARE @sso_com_rate decimal (5, 2) = 0
	DECLARE @sso_emp_rate decimal (5, 2) = 0

	DECLARE @sso_com_amount decimal (10, 2) = 0
	DECLARE @sso_emp_amount decimal (10, 2) = 0
 
	SELECT @sso_com_rate=ISNULL(SSO_COM_RATE, 0), @sso_emp_rate=ISNULL(SSO_EMP_RATE, 0)  
	FROM SYS_MT_COMPANYS 		
	WHERE COMPANY_CODE=@CompanyCode
	
	SET @sso_com_amount = (@cal_amount * @sso_com_rate) / 100
	SET @sso_emp_amount = (@cal_amount * @sso_emp_rate) / 100
	
	INSERT INTO @SSO VALUES(@sso_emp_rate, @sso_emp_amount, @sso_com_rate, @sso_com_amount)
	RETURN
END
GO


IF EXISTS(SELECT * FROM sysobjects WHERE name = 'PAY_FNT_ROUNDTAX') 
BEGIN 
	DROP FUNCTION PAY_FNT_ROUNDTAX 
END 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[PAY_FNT_ROUNDTAX]
(
    @Amount decimal (12, 3)
)
RETURNS @Round TABLE 
(
	Result decimal (12, 2)
)      
AS
BEGIN

	DECLARE @amount_int int
	DECLARE @output_amount decimal (12, 2) = 0
	DECLARE @round_value decimal (4, 2)
	DECLARE @point decimal (4, 3)

	-- Convert to Int
	SET @amount_int = CAST(ROUND(@Amount, 3, 1) AS INT)

	-- Get decimal point
	SET @point = ROUND(@Amount, 3, 1) - @amount_int

	SET @round_value = 0
	SET @output_amount = ROUND(@Amount, 3, 1)

	--SELECT TOP 1 @round_value=ISNULL(ROUND_RESULT, 0) 
	--FROM HRM_MT_ROUND 
	--INNER JOIN HRM_TR_ROUND ON HRM_MT_ROUND.ROUND_ID=HRM_TR_ROUND.ROUND_ID
	--WHERE HRM_MT_ROUND.ROUND_CODE = 'STD'
	--AND (@point BETWEEN ROUND_FROM AND ROUND_TO)

	SET @output_amount = @amount_int + @round_value

	INSERT INTO @Round VALUES(@output_amount)
	RETURN

END

GO


IF EXISTS(SELECT * FROM sysobjects WHERE name = 'PAY_FNT_TAX') 
BEGIN 
	DROP FUNCTION PAY_FNT_TAX 
END 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[PAY_FNT_TAX]
(
    @CompanyCode varchar (30)
	, @WorkerCode varchar (30)
	, @PeriodPay datetime	
	, @IncomeFix decimal(14, 2)
	, @DeductFix decimal(14, 2)
	, @IncomeVar decimal(14, 2)
	, @DeductVar decimal(14, 2)
	, @IntaxFix decimal(14, 2)
	, @IntaxVar decimal(14, 2)
	, @Language varchar(3)
	, @Div bit
	, @TaskBy varchar(30)
)
RETURNS @Tax TABLE 
(
	TaxFix decimal (12, 2), TaxVar decimal (12, 2), MulPeriod int
	, ReduceSSO decimal (12, 2)
	, ReducePF decimal (12, 2)
	, ReduceRMF decimal (12, 2)
	, ReduceSSF decimal (12, 2)
)      

AS
BEGIN 
	
	DECLARE @allow_income_fix decimal (12, 2) = @IncomeFix
	DECLARE @allow_deduct_fix decimal (12, 2) = @DeductFix
	DECLARE @allow_income_var decimal (12, 2) = @IncomeVar
	DECLARE @allow_deduct_var decimal (12, 2) = @DeductVar
	
	--********************************************
	-- STEP 1 check period
	--********************************************
	DECLARE @period_from datetime
	DECLARE @period_to datetime
	DECLARE @period_pay datetime
	DECLARE @period_id char (2)
	DECLARE @period_year char (4)
	DECLARE @emptype_code char (4)

	SELECT @emptype_code=WORKER_TYPE
	FROM EMP_MT_WORKER
	WHERE COMPANY_CODE=@CompanyCode
	AND WORKER_CODE=@WorkerCode

	SELECT @period_from=PERIOD_FROM, @period_to=PERIOD_TO, @period_pay=PERIOD_PAYMENT, @period_id=PERIOD_NO, @period_year=YEAR_CODE
	FROM PAY_MT_PERIOD
	WHERE COMPANY_CODE=@CompanyCode
	AND EMPTYPE_CODE=@emptype_code
	AND PERIOD_TYPE='PAY'
	AND PERIOD_PAYMENT=@PeriodPay
	
	DECLARE @period_total int
	DECLARE @period_mul int
	
	SET @period_total=0
	SET @period_mul=0

	SELECT @period_total=COUNT(PERIOD_ID) FROM PAY_MT_PERIOD WHERE COMPANY_CODE=@CompanyCode AND EMPTYPE_CODE=@emptype_code AND YEAR_CODE=@period_year
	
	-- F add 22/01/2021
	IF @period_total < 12 BEGIN
		SET @period_total = 12
	END
	--

	IF @period_total > 0 AND @period_id <> ''  BEGIN	
		SET @period_mul = (@period_total - CAST(@period_id AS INT)) + 1	
	END

	--PRINT 'Period Total:' + CAST(@period_total AS varchar(30))
	--PRINT 'Period ID:' + CAST(@period_id AS varchar(30))
	--PRINT 'Period Mul:' + CAST(@period_mul AS varchar(30))

	--********************************************
	-- Step 2 get Allowance calculate Tax
	--********************************************

	DECLARE @allow_income_acc decimal (12, 2) = 0
	DECLARE @allow_deduct_acc decimal (12, 2) = 0

	SELECT @allow_income_acc=ISNULL(SUM(PAYITEM_AMOUNT), 0) 
	FROM PAY_TR_PAYITEM 
	INNER JOIN PAY_MT_ITEM ON PAY_TR_PAYITEM.COMPANY_CODE=PAY_MT_ITEM.COMPANY_CODE AND PAY_TR_PAYITEM.ITEM_CODE=PAY_MT_ITEM.ITEM_CODE
	WHERE PAY_TR_PAYITEM.COMPANY_CODE=@CompanyCode AND PAY_TR_PAYITEM.WORKER_CODE=@WorkerCode
	AND PAY_MT_ITEM.ITEM_TYPE = 'IN' AND PAY_MT_ITEM.ITEM_CALTAX = 'Y'
	AND PAY_TR_PAYITEM.PAYITEM_DATE IN (SELECT PERIOD_PAYMENT FROM PAY_MT_PERIOD WHERE COMPANY_CODE=@CompanyCode AND EMPTYPE_CODE=@emptype_code AND YEAR_CODE=@period_year AND PERIOD_PAYMENT < @PeriodPay)

	SELECT @allow_deduct_acc=ISNULL(SUM(PAYITEM_AMOUNT), 0) 
	FROM PAY_TR_PAYITEM 
	INNER JOIN PAY_MT_ITEM ON PAY_TR_PAYITEM.COMPANY_CODE=PAY_MT_ITEM.COMPANY_CODE AND PAY_TR_PAYITEM.ITEM_CODE=PAY_MT_ITEM.ITEM_CODE
	WHERE PAY_TR_PAYITEM.COMPANY_CODE=@CompanyCode AND PAY_TR_PAYITEM.WORKER_CODE=@WorkerCode
	AND PAY_MT_ITEM.ITEM_TYPE = 'DE' AND PAY_MT_ITEM.ITEM_CALTAX = 'Y'
	AND PAY_TR_PAYITEM.PAYITEM_DATE IN (SELECT PERIOD_PAYMENT FROM PAY_MT_PERIOD WHERE COMPANY_CODE=@CompanyCode AND EMPTYPE_CODE=@emptype_code AND YEAR_CODE=@period_year AND PERIOD_PAYMENT < @PeriodPay)


	--PRINT '****** Allowance'
	--PRINT 'Income fix:' + CAST(@allow_income_fix AS varchar(30))
	--PRINT 'Deduct fix:' + CAST(@allow_deduct_fix AS varchar(30))
	--PRINT 'Income var:' + CAST(@allow_income_var AS varchar(30))
	--PRINT 'Deduct var:' + CAST(@allow_deduct_var AS varchar(30))
	--PRINT '--'
	--PRINT 'Income (acc):' + CAST(@allow_income_acc AS varchar(30))
	--PRINT 'Deduct (acc):' + CAST(@allow_deduct_acc AS varchar(30))


	--**********************
	-- Step 3 Calculate PF
	--**********************
	DECLARE @reduce_pf decimal (12, 2) = 0
	DECLARE @reduce_pf_acc decimal (12, 2) = 0

	SELECT @reduce_pf=ISNULL(SUM(ISNULL(PAYTRAN_PFEMP, 0)), 0)
	FROM PAY_TR_PAYTRAN
	WHERE COMPANY_CODE=@CompanyCode AND WORKER_CODE=@WorkerCode 
	AND PAYTRAN_PAYDATE = @PeriodPay

	SELECT @reduce_pf_acc=ISNULL(SUM(ISNULL(PAYTRAN_PFEMP, 0)), 0)
	FROM PAY_TR_PAYTRAN
	WHERE COMPANY_CODE=@CompanyCode AND WORKER_CODE=@WorkerCode 
	AND PAYTRAN_PAYDATE IN (SELECT PERIOD_PAYMENT FROM PAY_MT_PERIOD WHERE COMPANY_CODE=@CompanyCode AND EMPTYPE_CODE=@emptype_code AND YEAR_CODE=@period_year AND PERIOD_PAYMENT < @PeriodPay) 

	--PRINT '****** Provident fund'
	--PRINT 'PF : ' + CAST( @reduce_pf AS varchar(50))
	--PRINT 'PF (acc) : ' + CAST( @reduce_pf_acc AS varchar(50))
	-- Summary all year
	SET @reduce_pf = (@reduce_pf * @period_mul) + @reduce_pf_acc
	--PRINT 'PF (per year) : ' + CAST( @reduce_pf AS varchar(50))

	--**********************
	-- Step 3 SSO
	--**********************
	DECLARE @reduce_sso decimal (12, 2) = 0
	DECLARE @reduce_sso_acc decimal (12, 2) = 0

	SELECT @reduce_sso=ISNULL(SUM(ISNULL(PAYTRAN_SSOEMP, 0)), 0)
	FROM PAY_TR_PAYTRAN
	WHERE COMPANY_CODE=@CompanyCode AND WORKER_CODE=@WorkerCode 
	AND PAYTRAN_PAYDATE = @PeriodPay

	SELECT @reduce_sso_acc=ISNULL(SUM(ISNULL(PAYTRAN_SSOEMP, 0)), 0)
	FROM PAY_TR_PAYTRAN
	WHERE COMPANY_CODE=@CompanyCode AND WORKER_CODE=@WorkerCode 
	AND PAYTRAN_PAYDATE IN (SELECT PERIOD_PAYMENT FROM PAY_MT_PERIOD WHERE COMPANY_CODE=@CompanyCode AND EMPTYPE_CODE=@emptype_code AND YEAR_CODE=@period_year AND PERIOD_PAYMENT < @PeriodPay) 



	--PRINT '****** Social'
	--PRINT 'SSO : ' + CAST( @reduce_sso AS varchar(50))
	--PRINT 'SSO (acc) : ' + CAST( @reduce_sso_acc AS varchar(50))
	-- Summary all year
	SET @reduce_sso = (@reduce_sso * @period_mul) + @reduce_sso_acc
	
	--PRINT 'SSO (per year) : ' + CAST( @reduce_sso AS varchar(50))

	--********************************************
	-- STEP 4 Get Reduce emp
	--********************************************
	DECLARE @table_reduct_emp TABLE(reduce_id varchar(5), reduce_amount decimal(10, 2)) 

	--**********************
	-- Step 5 Deduct Expense and Reduce
	--**********************
	DECLARE @allow_estimated decimal (12, 2) = 0

	--PRINT '############################# FIX #############################'
	--PRINT '           1. Income (Accumulate) : ' + CAST((@allow_income_acc - @allow_deduct_acc) AS varchar(50))

	--PRINT '           2. Count Period : ' + CAST(@period_mul AS varchar(50))
	
	SET @allow_estimated = ((@allow_income_fix - @allow_deduct_fix) * @period_mul) + @IntaxFix
	
	--PRINT '           3. Estimated income : ' + CAST(@allow_estimated AS varchar(50))
		
	DECLARE @pf_over decimal (12, 2)
	SET @pf_over = @reduce_pf - 10000
	IF @pf_over < 0 BEGIN
		SET @pf_over = 0
	END
	--PRINT '           4. Expert PF : ' + CAST( @pf_over AS varchar(50))

	SET @allow_estimated = @allow_estimated - @pf_over	
	--PRINT '           5. (3. - 4.) : ' + CAST( @allow_estimated AS varchar(50))
	
	SET @allow_estimated = @allow_estimated + (@allow_income_acc - @allow_deduct_acc)	
	--PRINT '           6. (5. + 1.) : ' + CAST( @allow_estimated AS varchar(50))

	DECLARE @reduce_expense decimal (12, 2)
	SET @reduce_expense = (@allow_estimated * 50) / 100
	-- Check deduct expense over max expense
	IF @reduce_expense > 100000 BEGIN
		SET @reduce_expense = 100000
	END

	--PRINT '           7. Expense (50%) : ' + CAST( @reduce_expense AS varchar(50))

	SET @allow_estimated = @allow_estimated - @reduce_expense
	--PRINT '           8. (6. - 7.) : ' + CAST( @allow_estimated AS varchar(50))

	-- Get reduce
	INSERT INTO @table_reduct_emp
	SELECT ReduceID, ReduceAmount FROM dbo.PAY_FNT_GETEMPREDUCE(@CompanyCode, @WorkerCode, @PeriodPay, @allow_estimated, @Language)


	DECLARE @reduce_all decimal (12, 2) = 0
	DECLARE @reduce_rmf decimal (12, 2) = 0
	DECLARE @reduce_ssf decimal (12, 2) = 0
	
	SELECT @reduce_all=SUM(reduce_amount) FROM @table_reduct_emp WHERE (NOT reduce_id IN ('RMF', 'SSF'))
	SELECT @reduce_rmf=ISNULL(SUM(reduce_amount), 0) FROM @table_reduct_emp WHERE reduce_id = 'RMF'
	SELECT @reduce_ssf=ISNULL(SUM(reduce_amount), 0) FROM @table_reduct_emp WHERE reduce_id = 'SSF'

	-- Check max PF
	IF @reduce_pf > 10000 BEGIN	
		SET @reduce_pf = 10000
	END

	IF (@reduce_pf + @reduce_rmf + @reduce_ssf) > 500000 BEGIN	
		-- MAX 500,000
		-- PF  10,000
		-- RMF 500,000
		-- SSF 20,000
		SET @reduce_rmf = 500000 - (@reduce_pf + @reduce_ssf)

		IF (@reduce_pf + @reduce_rmf + @reduce_ssf) > 500000 BEGIN	
			SET @reduce_ssf = 500000 - (@reduce_pf + @reduce_rmf)
		END
	END

	--PRINT 'Reduce [SSO] : ' + CAST( @reduce_sso AS varchar(50))
	--PRINT 'Reduce [PF] : ' + CAST( @reduce_pf AS varchar(50))
	--PRINT 'Reduce [RMF] : ' + CAST( @reduce_rmf AS varchar(50))
	--PRINT 'Reduce [SSF] : ' + CAST( @reduce_ssf AS varchar(50))
	--PRINT 'Reduce [Other] : ' + CAST( @reduce_all AS varchar(50))


	SET @reduce_all = @reduce_all + @reduce_pf + @reduce_rmf + @reduce_ssf + @reduce_sso
	--PRINT '           9. Reduce sum : ' + CAST( @reduce_all AS varchar(50))

	SET @allow_estimated = @allow_estimated - @reduce_all
	IF @allow_estimated < 0 BEGIN
		SET @allow_estimated = 0
	END

	--PRINT '           10. (8. - 9.) : ' + CAST( @allow_estimated AS varchar(50))
	--PRINT '           11. Net annual : ' + CAST( @allow_estimated AS varchar(50))

	--**********************
	-- Step 8 Calculate tax
	--**********************
	DECLARE @temp decimal (12, 3)
	DECLARE @allow_tax decimal (12, 4)
	DECLARE @allow_temp decimal (12, 4)
	DECLARE @annual_tax_fix decimal (12, 4)
	DECLARE @tax_no varchar(5)
	DECLARE @tax_from decimal (12, 2)
	DECLARE @tax_to decimal (12, 2)
	DECLARE @tax_per decimal (5, 2)

	DECLARE @tax_fix decimal (12, 3) = 0
	DECLARE @tax_var decimal (12, 3) = 0

	-- Default value
	SET @allow_temp = @allow_estimated
	SET @annual_tax_fix = 0
	SET @allow_tax = 0
	SET @tax_fix = 0
	SET @tax_var = 0

	DECLARE cur_rate CURSOR FOR SELECT TAXRATE_ID, TAXRATE_FROM, TAXRATE_TO, TAXRATE_TAX
	FROM PAY_TR_TAXRATE
	WHERE COMPANY_CODE = @CompanyCode
	ORDER BY TAXRATE_TAX DESC

	OPEN cur_rate 
		FETCH NEXT FROM cur_rate INTO @tax_no, @tax_from, @tax_to, @tax_per
		WHILE @@FETCH_STATUS = 0 
		BEGIN 
			
			IF @allow_temp >= @tax_from AND @allow_temp <= @tax_to AND @tax_per > 0 BEGIN

				--PRINT CAST( @allow_temp AS varchar(50))
				--PRINT '(' + @tax_no + ')' + CAST( @tax_from AS varchar(50)) + '-' + CAST( @tax_to AS varchar(50)) + ' : ' + CAST( @tax_per AS varchar(50))
			
				SET @temp = @allow_temp - @tax_from + 1
				SET @allow_tax = @allow_tax + (( @temp * @tax_per) / 100)
			
				-- Set next step
				SET @allow_temp = @tax_from - 1

				--PRINT '*** Calculate Tax : ' + CAST( @temp AS varchar(50))  + ' --> ' + CAST( (( @temp * @tax_per) / 100) AS varchar(50)) 
			END
		
		FETCH NEXT FROM cur_rate INTO @tax_no, @tax_from, @tax_to, @tax_per
		END 
	CLOSE cur_rate 
	DEALLOCATE cur_rate

	SET @annual_tax_fix = @allow_tax
	--PRINT '           12. Calculate annual tax : ' + CAST( @annual_tax_fix AS varchar(50))

	-- Tax (Accumulate)
	DECLARE @tax_acc decimal (12, 2) = 0
	SELECT @tax_acc=ISNULL(SUM(ISNULL(PAYTRAN_TAX_401, 0) + ISNULL(PAYTRAN_TAX_4013, 0) + ISNULL(PAYTRAN_TAX_402I, 0) + ISNULL(PAYTRAN_TAX_402O, 0)), 0)
	FROM PAY_TR_PAYTRAN
	WHERE COMPANY_CODE=@CompanyCode AND WORKER_CODE=@WorkerCode 
	AND PAYTRAN_PAYDATE IN (SELECT PERIOD_PAYMENT FROM PAY_MT_PERIOD WHERE COMPANY_CODE=@CompanyCode AND EMPTYPE_CODE=@emptype_code AND YEAR_CODE=@period_year AND PERIOD_PAYMENT < @PeriodPay) 
	--PRINT '           13. Tax already paid : ' + CAST( @tax_acc AS varchar(50))

	-- Get Tac withholding
	DECLARE @tax_withholding decimal (12, 2) = 0
	SELECT @tax_withholding = ISNULL(PAYTAXWITHHOLDING_TAX, 0) FROM PAY_TR_PAYTAXWITHHOLDING
	WHERE COMPANY_CODE=@CompanyCode AND WORKER_CODE=@WorkerCode AND PAYTAXWITHHOLDING_DATE = @PeriodPay

	SET @tax_acc = @tax_acc + @tax_withholding
	--


	SET @allow_tax = @allow_tax - @tax_acc
	--PRINT '           14. (12. - 13.) : ' + CAST( @allow_tax AS varchar(50))
	

	IF @Div = 1 BEGIN
		SET @tax_fix = @allow_tax / @period_mul
	END
	ELSE BEGIN
		SET @tax_fix = @allow_tax
	END

	-- Round
	IF (@period_id <> '12' OR @period_id <> '24') BEGIN
		SELECT @tax_fix=Result FROM dbo.PAY_FNT_ROUNDTAX(@tax_fix)
	END

	IF @tax_fix < 0  BEGIN
		SET @tax_fix = 0
	END

	--PRINT '############################# VAR #############################'
	--PRINT '           1. Income (Accumulate) : ' + CAST((@allow_income_acc - @allow_deduct_acc) AS varchar(50))

	--PRINT '           2. Count Period : ' + CAST(@period_mul AS varchar(50))
	
	SET @allow_estimated = ((@allow_income_fix - @allow_deduct_fix) * @period_mul)

	SET @allow_estimated = @allow_estimated + (@allow_income_var - @allow_deduct_var)  + @IntaxVar
	
	--PRINT '           3. Estimated income : ' + CAST(@allow_estimated AS varchar(50))

	--PRINT '           4. Expert PF : ' + CAST( @pf_over AS varchar(50))

	SET @allow_estimated = @allow_estimated - @pf_over	
	--PRINT '           5. (3. - 4.) : ' + CAST( @allow_estimated AS varchar(50))
	
	SET @allow_estimated = @allow_estimated + (@allow_income_acc - @allow_deduct_acc)	
	--PRINT '           6. (5. + 1.) : ' + CAST( @allow_estimated AS varchar(50))

	SET @reduce_expense = (@allow_estimated * 50) / 100
	-- Check deduct expense over max expense
	IF @reduce_expense > 100000 BEGIN
		SET @reduce_expense = 100000
	END

	--PRINT '           7. Expense (50%) : ' + CAST( @reduce_expense AS varchar(50))

	SET @allow_estimated = @allow_estimated - @reduce_expense
	--PRINT '           8. (6. - 7.) : ' + CAST( @allow_estimated AS varchar(50))

	--PRINT '           9. Reduce sum : ' + CAST( @reduce_all AS varchar(50))

	SET @allow_estimated = @allow_estimated - @reduce_all
	IF @allow_estimated < 0 BEGIN
		SET @allow_estimated = 0
	END

	--PRINT '           10. (8. - 9.) : ' + CAST( @allow_estimated AS varchar(50))
	--PRINT '           11. Net annual : ' + CAST( @allow_estimated AS varchar(50))

	--**********************
	-- Step 8 Calculate tax
	--**********************
	-- Default value
	SET @allow_temp = @allow_estimated
	SET @allow_tax = 0
	SET @tax_var = 0

	DECLARE cur_rate CURSOR FOR SELECT TAXRATE_ID, TAXRATE_FROM, TAXRATE_TO, TAXRATE_TAX
	FROM PAY_TR_TAXRATE
	WHERE COMPANY_CODE = @CompanyCode
	ORDER BY TAXRATE_TAX DESC

	OPEN cur_rate 
		FETCH NEXT FROM cur_rate INTO @tax_no, @tax_from, @tax_to, @tax_per
		WHILE @@FETCH_STATUS = 0 
		BEGIN 
			
			IF @allow_temp >= @tax_from AND @allow_temp <= @tax_to AND @tax_per > 0 BEGIN

				--PRINT CAST( @allow_temp AS varchar(50))
				--PRINT '(' + @tax_no + ')' + CAST( @tax_from AS varchar(50)) + '-' + CAST( @tax_to AS varchar(50)) + ' : ' + CAST( @tax_per AS varchar(50))
			
				SET @temp = @allow_temp - @tax_from + 1
				SET @allow_tax = @allow_tax + (( @temp * @tax_per) / 100)
			
				-- Set next step
				SET @allow_temp = @tax_from - 1

				--PRINT '*** Calculate Tax : ' + CAST( @temp AS varchar(50))  + ' --> ' + CAST( (( @temp * @tax_per) / 100) AS varchar(50)) 
			END
		
		FETCH NEXT FROM cur_rate INTO @tax_no, @tax_from, @tax_to, @tax_per
		END 
	CLOSE cur_rate 
	DEALLOCATE cur_rate

	--PRINT '           Annual tax (Fix + Var) : ' + CAST( @allow_tax AS varchar(50))
	SET @tax_var = @allow_tax - @annual_tax_fix

	-- Round
	IF (@period_id <> '12' OR @period_id <> '24') BEGIN
		SELECT @tax_var=Result FROM dbo.PAY_FNT_ROUNDTAX(@tax_var)
	END

	IF @tax_var < 0  BEGIN
		SET @tax_var = 0
	END

	--PRINT '           Tax Fix : ' + CAST( @tax_fix AS varchar(50))
	--PRINT '           Tax Var : ' + CAST( @tax_var AS varchar(50))

	--PRINT '           15. Tax (Current) : ' + CAST( @tax_fix + @tax_var AS varchar(50))


	INSERT INTO @Tax VALUES(@tax_fix, @tax_var, @period_mul, @reduce_sso, @reduce_pf, @reduce_rmf, @reduce_ssf)
	RETURN

END

GO


IF EXISTS (SELECT * FROM sysobjects WHERE name = 'ATT_PRO_CALABSENT') 
BEGIN 
DROP PROCEDURE ATT_PRO_CALABSENT 
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ATT_PRO_CALABSENT]
(
    @CompanyCode varchar (5)
	, @WorkerCode varchar (30)
	, @Fromdate datetime
	, @Todate datetime
	, @TaskBy varchar (30)
)
AS
BEGIN

	DECLARE @company_code varchar (5) = @CompanyCode
	DECLARE @worker_code varchar (15) = @WorkerCode
	DECLARE @from_date datetime = @Fromdate
	DECLARE @to_date datetime = @Todate

	-- Get worker detail
	DECLARE @worker_emptype varchar (1)
	DECLARE @worker_hrs decimal(3, 2)
	DECLARE @worker_hiredate datetime
	DECLARE @worker_resigndate datetime
	SELECT TOP 1 @worker_emptype = ISNULL(WORKER_TYPE, 'M'), @worker_hiredate = WORKER_HIREDATE, @worker_resigndate = ISNULL(WORKER_RESIGNDATE, '01/01/2999'), @worker_hrs = ISNULL(HRS_PERDAY, 8) 
	FROM EMP_MT_WORKER WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code

	-- Step 2 Loop day 
	DECLARE @timecard_date datetime
	DECLARE @timecard_daytype varchar (1) 
	DECLARE @timecard_leave int = 0

	DECLARE @working_min int = @worker_hrs * 60

	DECLARE @project_code varchar (20)
	DECLARE @projob_code varchar (20)

	DECLARE cur_day CURSOR FOR
	SELECT TIMECARD_WORKDATE, TIMECARD_DAYTYPE, ISNULL(PROJECT_CODE, ''), ISNULL(PROJOB_CODE, '')
	FROM ATT_TR_TIMECARD
	WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code						
	AND (TIMECARD_WORKDATE BETWEEN @from_date AND @to_date)
	AND TIMECARD_DAYTYPE = 'A'

	OPEN cur_day 
		FETCH NEXT FROM cur_day INTO @timecard_date, @timecard_daytype, @project_code, @projob_code
		WHILE @@FETCH_STATUS = 0 
		BEGIN 

			PRINT '==== ' + CAST(@timecard_date AS varchar(30))		
		
			-- Get wage
			DECLARE @wage decimal(12, 2) = 0		
			SELECT TOP 1 @wage = ISNULL(EMPSALARY_AMOUNT, 0) 
			FROM EMP_TR_SALARY 
			WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code AND EMPSALARY_DATE <= @timecard_date 
			ORDER BY EMPSALARY_DATE DESC

			IF @worker_emptype = 'M' BEGIN
				SET @wage = @wage / 30
			END

			PRINT 'Wage/day: ' + CAST(@wage AS varchar(30))

			--PRINT (@wage / @worker_hrs)
			--PRINT (@timecard_late / CONVERT(decimal(4,2), 60)) 
		
			DECLARE @absent_amount decimal (8, 2) = @wage

		

			IF (EXISTS(SELECT * FROM ATT_TR_WAGEDAY WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code AND WAGEDAY_DATE = @timecard_date AND PROJECT_CODE=@project_code AND PROJOB_CODE=@projob_code)) 	BEGIN
				UPDATE ATT_TR_WAGEDAY SET ABSENT_AMOUNT = @absent_amount, ABSENT_MIN = @working_min, MODIFIED_BY = @TaskBy, MODIFIED_DATE = getdate()
				WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code AND WAGEDAY_DATE = @timecard_date AND PROJECT_CODE=@project_code AND PROJOB_CODE=@projob_code
			END
			ELSE BEGIN
				INSERT INTO ATT_TR_WAGEDAY (COMPANY_CODE, WORKER_CODE, WAGEDAY_DATE, ABSENT_AMOUNT, ABSENT_MIN, CREATED_BY, CREATED_DATE, FLAG, PROJECT_CODE, PROJOB_CODE)
				VALUES(@company_code, @worker_code, @timecard_date, @absent_amount, @working_min, @TaskBy, getdate(), '0', @project_code, @projob_code)
			END
															
		FETCH NEXT FROM cur_day INTO @timecard_date, @timecard_daytype, @timecard_leave, @project_code, @projob_code
		END 
	CLOSE cur_day 
	DEALLOCATE cur_day
END
GO


IF EXISTS (SELECT * FROM sysobjects WHERE name = 'ATT_PRO_CALALLOWANCE') 
BEGIN 
DROP PROCEDURE ATT_PRO_CALALLOWANCE 
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ATT_PRO_CALALLOWANCE]
(
    @CompanyCode varchar (5)
	, @WorkerCode varchar (30)
	, @Fromdate datetime
	, @Todate datetime
	, @TaskBy varchar (30)
)
AS
BEGIN

	DECLARE @company_code varchar (5) = @CompanyCode
	DECLARE @worker_code varchar (15) = @WorkerCode
	DECLARE @from_date datetime = @Fromdate
	DECLARE @to_date datetime = @Todate

	-- Get worker detail
	DECLARE @worker_emptype varchar (1)
	DECLARE @worker_hrs decimal(3, 2)
	DECLARE @worker_hiredate datetime
	DECLARE @worker_resigndate datetime
	SELECT TOP 1 @worker_emptype = ISNULL(WORKER_TYPE, 'M'), @worker_hiredate = WORKER_HIREDATE, @worker_resigndate = ISNULL(WORKER_RESIGNDATE, '01/01/2999'), @worker_hrs = ISNULL(HRS_PERDAY, 8) 
	FROM EMP_MT_WORKER WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code

	-- Get Policy
	DECLARE @pol_aw varchar (15) = ''
	SELECT @pol_aw=ISNULL(EMPPOLATT_POLICY_CODE, '') FROM ATT_TR_EMPPOLATT WHERE COMPANY_CODE=@company_code AND WORKER_CODE = @worker_code AND EMPPOLATT_POLICY_TYPE = 'AW'

		   	  


	-- Step 2 Loop day 
	DECLARE @timecard_date datetime
	DECLARE @timecard_daytype varchar (1) 
	DECLARE @timecard_before int = 0
	DECLARE @timecard_normal int = 0
	DECLARE @timecard_break int = 0
	DECLARE @timecard_after int = 0
	DECLARE @timecard_shift varchar (10) 

	DECLARE @timecard_in varchar (10) 
	DECLARE @timecard_out varchar (10) 

	DECLARE @working_min int 

	DECLARE @project_code varchar (20)
	DECLARE @projob_code varchar (20)

	DECLARE cur_day CURSOR FOR
	SELECT TIMECARD_WORKDATE, TIMECARD_DAYTYPE, TIMECARD_BEFORE_MIN_APP, TIMECARD_WORK1_MIN_APP + TIMECARD_WORK2_MIN_APP, TIMECARD_BREAK_MIN_APP, TIMECARD_AFTER_MIN_APP, SHIFT_CODE, CONVERT(varchar,ISNULL(TIMECARD_CH1, TIMECARD_CH3),8), CONVERT(varchar,ISNULL(TIMECARD_CH10, TIMECARD_CH4),8), ISNULL(PROJECT_CODE, ''), ISNULL(PROJOB_CODE, '')
	
	FROM ATT_TR_TIMECARD
	WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code						
	AND TIMECARD_WORKDATE BETWEEN @from_date AND @to_date

	OPEN cur_day 
		FETCH NEXT FROM cur_day INTO @timecard_date, @timecard_daytype, @timecard_before, @timecard_normal, @timecard_break, @timecard_after, @timecard_shift, @timecard_in, @timecard_out, @project_code, @projob_code
		WHILE @@FETCH_STATUS = 0 
		BEGIN 

			PRINT '==== ' + CAST(@timecard_date AS varchar(30))		
			PRINT 'Shift : ' + @timecard_shift

			PRINT 'Time IN : ' + @timecard_in
			PRINT 'Time OUT : ' + @timecard_out

			PRINT 'Daytype : ' + @timecard_daytype
			PRINT 'Min : ' + CAST(@working_min AS varchar(30))

			DECLARE @shift_allowance decimal (10, 2) = 0
			DECLARE @shift_count int = 0
		
			-- Shift allowance
			DECLARE @timeallw_no int = 0
			DECLARE @timeallw_type varchar (1) 
			DECLARE @timeallw_method varchar (1) 
			DECLARE @timeallw_time int = 0
			DECLARE @timeallw_timein varchar(5) = ''
			DECLARE @timeallw_timeout varchar(5) = ''
			DECLARE @timeallw_normalday decimal(5, 2) = 0
			DECLARE @timeallw_offday decimal(5, 2) = 0
			DECLARE @timeallw_companyday decimal(5, 2) = 0
			DECLARE @timeallw_holidayday decimal(5, 2) = 0
			DECLARE @timeallw_leaveday decimal(5, 2) = 0

			DECLARE cur_allw CURSOR FOR
			SELECT TIMEALLW_NO, TIMEALLW_TYPE, TIMEALLW_METHOD, TIMEALLW_TIME, TIMEALLW_TIMEIN, TIMEALLW_TIMEOUT, TIMEALLW_NORMALDAY, TIMEALLW_OFFDAY, TIMEALLW_COMPANYDAY, TIMEALLW_HOLIDAY, TIMEALLW_LEAVEDAY
			FROM ATT_TR_TIMEALLW
			WHERE COMPANY_CODE = @company_code AND PLANTIMEALLW_CODE = @pol_aw						
			ORDER BY TIMEALLW_NO

			OPEN cur_allw 
			FETCH NEXT FROM cur_allw INTO @timeallw_no, @timeallw_type, @timeallw_method, @timeallw_time, @timeallw_timein, @timeallw_timeout, @timeallw_normalday, @timeallw_offday, @timeallw_companyday, @timeallw_holidayday, @timeallw_leaveday
			WHILE @@FETCH_STATUS = 0 
			BEGIN 

					-- Method H = Work Hours, T = Work Time

					
					DECLARE @condition_pay bit = 0

					IF @timeallw_method = 'H' BEGIN
						-- Type N = Normal | O = Overtime | A = All

						IF @timeallw_type = 'N' BEGIN							
							SET @working_min = @timecard_normal
						END

						IF @timeallw_type = 'O' BEGIN							
							SET @working_min = @timecard_before + @timecard_after
						END

						IF @timeallw_type = 'A' BEGIN							
							SET @working_min = @timecard_before + @timecard_normal + @timecard_after
						END

						DECLARE @allowance_min int = 0

						SELECT @allowance_min = CAST( SUBSTRING( @timeallw_timein, 1, 2) AS INT) * 60 +  CAST( SUBSTRING( @timeallw_timein, 4, 2) AS INT)

						IF @working_min >= @allowance_min BEGIN
							SET @condition_pay = 1
						END

					END
					ELSE BEGIN
						-- Type 1 = Work before | 2 = Work IN since | 3 = Work OUT since | 4 = Period
						DECLARE @timein int = 0
						DECLARE @timeout int = 0

						DECLARE @timein_shift int = 0
						DECLARE @timeout_shift int = 0


						SELECT @timein = CAST( SUBSTRING( @timeallw_timein, 1, 2) AS INT) * 60 +  CAST( SUBSTRING( @timeallw_timein, 4, 2) AS INT)
						SELECT @timeout = CAST( SUBSTRING( @timeallw_timeout, 1, 2) AS INT) * 60 +  CAST( SUBSTRING( @timeallw_timeout, 4, 2) AS INT)

						SELECT @timein_shift = CAST( SUBSTRING( @timecard_in, 1, 2) AS INT) * 60 +  CAST( SUBSTRING( @timecard_in, 4, 2) AS INT)
						SELECT @timeout_shift = CAST( SUBSTRING( @timecard_out, 1, 2) AS INT) * 60 +  CAST( SUBSTRING( @timecard_out, 4, 2) AS INT)

						--PRINT 'shift in : ' + CAST(@timein_shift AS varchar(30))
						--PRINT 'shift out : ' + CAST(@timeout_shift AS varchar(30))

						--PRINT 'allw in : ' + CAST(@timein AS varchar(30))
						--PRINT 'allw out : ' + CAST(@timeout AS varchar(30))

						IF @timeallw_type = 1 BEGIN
							IF @timein_shift < @timein BEGIN							
								SET @condition_pay = 1
							END
						END

						IF @timeallw_type = 2 BEGIN
							IF @timein_shift >= @timein BEGIN							
								SET @condition_pay = 1
							END
						END

						IF @timeallw_type = 3 BEGIN
							IF @timeout_shift >= @timein BEGIN							
								SET @condition_pay = 1
							END
						END

						IF @timeallw_type = 4 BEGIN
							IF @timein_shift >= @timein and @timeout_shift <= @timeout BEGIN							
								SET @condition_pay = 1
							END
						END
						
					END

					IF @condition_pay = 1 BEGIN

						IF @timecard_daytype = 'N' BEGIN
							SET @shift_allowance = @shift_allowance + @timeallw_normalday
						END
						IF @timecard_daytype = 'O' BEGIN
							SET @shift_allowance = @shift_allowance + @timeallw_offday
						END
						IF @timecard_daytype = 'C' BEGIN
							SET @shift_allowance = @shift_allowance + @timeallw_companyday
						END
						IF @timecard_daytype = 'H' BEGIN
							SET @shift_allowance = @shift_allowance + @timeallw_holidayday
						END
						IF @timecard_daytype = 'L' BEGIN
							SET @shift_allowance = @shift_allowance + @timeallw_leaveday
						END

						SET @shift_count = @shift_count + 1

					END

					--IF @shift_allowance > 0 BEGIN
					--	PRINT 'Method : ' + @timeallw_method
					--	PRINT 'Type : ' + @timeallw_type
					--	PRINT 'Allowance : ' + CAST(@shift_allowance AS varchar(30))
					--END

					FETCH NEXT FROM cur_allw INTO @timeallw_no, @timeallw_type, @timeallw_method, @timeallw_time, @timeallw_timein, @timeallw_timeout, @timeallw_normalday, @timeallw_offday, @timeallw_companyday, @timeallw_holidayday, @timeallw_leaveday
				END 
			CLOSE cur_allw 
			DEALLOCATE cur_allw

			IF (EXISTS(SELECT * FROM ATT_TR_WAGEDAY WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code AND WAGEDAY_DATE = @timecard_date AND PROJECT_CODE=@project_code AND PROJOB_CODE=@projob_code)) 	BEGIN
				UPDATE ATT_TR_WAGEDAY SET ALLOWANCE_AMOUNT = @shift_allowance, MODIFIED_BY = @TaskBy, MODIFIED_DATE = getdate()
				WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code AND WAGEDAY_DATE = @timecard_date AND PROJECT_CODE=@project_code AND PROJOB_CODE=@projob_code
			END
			ELSE BEGIN
				INSERT INTO ATT_TR_WAGEDAY (COMPANY_CODE, WORKER_CODE, WAGEDAY_DATE, ALLOWANCE_AMOUNT, CREATED_BY, CREATED_DATE, FLAG, PROJECT_CODE, PROJOB_CODE)
				VALUES(@company_code, @worker_code, @timecard_date, @shift_allowance, @TaskBy, getdate(), '0', @project_code, @projob_code)
			END

															
		FETCH NEXT FROM cur_day INTO @timecard_date, @timecard_daytype, @timecard_before, @timecard_normal, @timecard_break, @timecard_after, @timecard_shift, @timecard_in, @timecard_out, @project_code, @projob_code
		END 
	CLOSE cur_day 
	DEALLOCATE cur_day

END
GO


IF EXISTS (SELECT * FROM sysobjects WHERE name = 'ATT_PRO_CALLATE') 
BEGIN 
DROP PROCEDURE ATT_PRO_CALLATE 
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[ATT_PRO_CALLATE]
(
    @CompanyCode varchar (5)
	, @WorkerCode varchar (30)
	, @Fromdate datetime
	, @Todate datetime
	, @Paydate datetime
	, @TaskBy varchar (30)
)
AS
BEGIN

	DECLARE @company_code varchar (5) = @CompanyCode
	DECLARE @worker_code varchar (15) = @WorkerCode
	DECLARE @from_date datetime = @Fromdate
	DECLARE @to_date datetime = @Todate
	DECLARE @pay_date datetime = @Paydate

	-- Get worker detail
	DECLARE @worker_emptype varchar (1)
	DECLARE @worker_hrs decimal(3, 2)
	DECLARE @worker_hiredate datetime
	DECLARE @worker_resigndate datetime
	SELECT TOP 1 @worker_emptype = ISNULL(WORKER_TYPE, 'M'), @worker_hiredate = WORKER_HIREDATE, @worker_resigndate = ISNULL(WORKER_RESIGNDATE, '01/01/2999'), @worker_hrs = ISNULL(HRS_PERDAY, 8) 
	FROM EMP_MT_WORKER WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code

	-- Step 2 Loop day 
	DECLARE @timecard_date datetime
	DECLARE @timecard_daytype varchar (1) 
	DECLARE @timecard_late int = 0
	DECLARE @working_min int 

	-- Clear data old
	UPDATE ATT_TR_WAGEDAY SET LATE_AMOUNT = 0, LATE_MIN = 0, MODIFIED_BY = @TaskBy, MODIFIED_DATE = getdate()
	WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code AND (WAGEDAY_DATE BETWEEN @from_date AND @to_date)
	--

	DECLARE @project_code varchar (20)
	DECLARE @projob_code varchar (20)

	DECLARE cur_day CURSOR FOR
	SELECT TIMECARD_WORKDATE, TIMECARD_DAYTYPE, TIMECARD_LATE_MIN_APP, ISNULL(PROJECT_CODE, ''), ISNULL(PROJOB_CODE, '')
	FROM ATT_TR_TIMECARD
	WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code						
	AND (TIMECARD_WORKDATE BETWEEN @from_date AND @to_date)
	AND TIMECARD_LATE_MIN_APP > 0 

	OPEN cur_day 
		FETCH NEXT FROM cur_day INTO @timecard_date, @timecard_daytype, @timecard_late, @project_code, @projob_code
		WHILE @@FETCH_STATUS = 0 
		BEGIN 

			--PRINT '==== ' + CAST(@timecard_date AS varchar(30))		
		
			--PRINT 'Late (min) : ' + CAST(@timecard_late AS varchar(30))

			-- Get wage
			DECLARE @wage decimal(12, 2) = 0		
			SELECT TOP 1 @wage = ISNULL(EMPSALARY_AMOUNT, 0) 
			FROM EMP_TR_SALARY 
			WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code AND EMPSALARY_DATE <= @timecard_date 
			ORDER BY EMPSALARY_DATE DESC

			IF @worker_emptype = 'M' BEGIN
				SET @wage = @wage / 30
			END

			--PRINT 'Wage/day: ' + CAST(@wage AS varchar(30))

			--PRINT (@wage / @worker_hrs)
			--PRINT (@timecard_late / CONVERT(decimal(4,2), 60)) 

			DECLARE @allowance decimal(12, 2) = 0	

			SELECT @allowance=ISNULL(SUM(PAYITEM_AMOUNT), 0) 
			FROM PAY_TR_PAYITEM 
			INNER JOIN PAY_MT_ITEM ON PAY_TR_PAYITEM.COMPANY_CODE=PAY_MT_ITEM.COMPANY_CODE AND PAY_TR_PAYITEM.ITEM_CODE=PAY_MT_ITEM.ITEM_CODE
			WHERE PAY_TR_PAYITEM.COMPANY_CODE=@company_code AND PAY_TR_PAYITEM.WORKER_CODE=@worker_code  AND PAY_TR_PAYITEM.PAYITEM_DATE=@pay_date
			AND PAY_MT_ITEM.ITEM_TYPE = 'IN' --AND PAY_MT_ITEM.ITEM_CALALLW='Y' 
			
			PRINT 'Allowance: ' + CAST(@allowance AS varchar(30))

			SET @allowance = @allowance / 30

			PRINT 'Allowance/day: ' + CAST(@allowance AS varchar(30))

			SET @wage = @wage + @allowance


		
			DECLARE @late_amount decimal (8, 2) = (@timecard_late / CONVERT(decimal(4,2), 60)) * (@wage / @worker_hrs)	
		
			--PRINT 'Late (amount) : ' + CAST(@late_amount AS varchar(30))

			IF (EXISTS(SELECT * FROM ATT_TR_WAGEDAY WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code AND WAGEDAY_DATE = @timecard_date AND PROJECT_CODE=@project_code AND PROJOB_CODE=@projob_code)) 	BEGIN
				UPDATE ATT_TR_WAGEDAY SET LATE_AMOUNT = @late_amount, LATE_MIN = @timecard_late, MODIFIED_BY = @TaskBy, MODIFIED_DATE = getdate()
				WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code AND WAGEDAY_DATE = @timecard_date AND PROJECT_CODE=@project_code AND PROJOB_CODE=@projob_code
			END
			ELSE BEGIN
				INSERT INTO ATT_TR_WAGEDAY (COMPANY_CODE, WORKER_CODE, WAGEDAY_DATE, LATE_AMOUNT, LATE_MIN, CREATED_BY, CREATED_DATE, FLAG, PROJECT_CODE, PROJOB_CODE)
				VALUES(@company_code, @worker_code, @timecard_date, @late_amount, @timecard_late, @TaskBy, getdate(), '0', @project_code, @projob_code)
			END
															
		FETCH NEXT FROM cur_day INTO @timecard_date, @timecard_daytype, @timecard_late, @project_code, @projob_code
		END 
	CLOSE cur_day 
	DEALLOCATE cur_day
END
GO


IF EXISTS (SELECT * FROM sysobjects WHERE name = 'ATT_PRO_CALLEAVE') 
BEGIN 
DROP PROCEDURE ATT_PRO_CALLEAVE 
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[ATT_PRO_CALLEAVE]
(
    @CompanyCode varchar (5)
	, @WorkerCode varchar (30)
	, @Fromdate datetime
	, @Todate datetime
	, @Paydate datetime
	, @TaskBy varchar (30)
)
AS
BEGIN

	--DECLARE @CompanyCode varchar (5) = 'APT'
	--DECLARE @WorkerCode varchar (30) = 'DRV0000001'
	--DECLARE @Fromdate datetime = '01/01/2023'
	--DECLARE @Todate datetime = '01/31/2023'
	--DECLARE @Paydate datetime = '01/25/2023'
	--DECLARE @TaskBy varchar (30) = 'TEST'


	DECLARE @company_code varchar (5) = @CompanyCode
	DECLARE @worker_code varchar (15) = @WorkerCode
	DECLARE @from_date datetime = @Fromdate
	DECLARE @to_date datetime = @Todate
	DECLARE @pay_date datetime = @Paydate

	-- Get worker detail
	DECLARE @worker_emptype varchar (1)
	DECLARE @worker_hrs decimal(3, 2)
	DECLARE @worker_hiredate datetime
	DECLARE @worker_resigndate datetime
	SELECT TOP 1 @worker_emptype = ISNULL(WORKER_TYPE, 'M'), @worker_hiredate = WORKER_HIREDATE, @worker_resigndate = ISNULL(WORKER_RESIGNDATE, '01/01/2999'), @worker_hrs = ISNULL(HRS_PERDAY, 8) 
	FROM EMP_MT_WORKER WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code

	-- Step 2 Loop day 
	DECLARE @timecard_date datetime
	DECLARE @timecard_daytype varchar (1) 
	DECLARE @timecard_leave int = 0


	DECLARE @working_min int 

	DECLARE @project_code varchar (20)
	DECLARE @projob_code varchar (20)

	DECLARE cur_day CURSOR FOR
	SELECT TIMECARD_WORKDATE, TIMECARD_DAYTYPE, TIMECARD_LEAVEDEDUCT_MIN, ISNULL(PROJECT_CODE, ''), ISNULL(PROJOB_CODE, '')
	FROM ATT_TR_TIMECARD
	WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code						
	AND (TIMECARD_WORKDATE BETWEEN @from_date AND @to_date)
	AND TIMECARD_LEAVEDEDUCT_MIN > 0 

	OPEN cur_day 
		FETCH NEXT FROM cur_day INTO @timecard_date, @timecard_daytype, @timecard_leave, @project_code, @projob_code
		WHILE @@FETCH_STATUS = 0 
		BEGIN 

			PRINT '==== ' + CAST(@timecard_date AS varchar(30))		
		
			PRINT 'Leave (min) : ' + CAST(@timecard_leave AS varchar(30))

			-- Get wage
			DECLARE @wage decimal(12, 2) = 0		
			SELECT TOP 1 @wage = ISNULL(EMPSALARY_AMOUNT, 0) 
			FROM EMP_TR_SALARY 
			WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code AND EMPSALARY_DATE <= @timecard_date 
			ORDER BY EMPSALARY_DATE DESC

			IF @worker_emptype = 'M' BEGIN
				SET @wage = @wage / 30
			END

			PRINT 'Wage/day: ' + CAST(@wage AS varchar(30))

			DECLARE @allowance decimal(12, 2) = 0	

			SELECT @allowance=ISNULL(SUM(PAYITEM_AMOUNT), 0) 
			FROM PAY_TR_PAYITEM 
			INNER JOIN PAY_MT_ITEM ON PAY_TR_PAYITEM.COMPANY_CODE=PAY_MT_ITEM.COMPANY_CODE AND PAY_TR_PAYITEM.ITEM_CODE=PAY_MT_ITEM.ITEM_CODE
			WHERE PAY_TR_PAYITEM.COMPANY_CODE=@company_code AND PAY_TR_PAYITEM.WORKER_CODE=@worker_code  AND PAY_TR_PAYITEM.PAYITEM_DATE=@pay_date
			AND PAY_MT_ITEM.ITEM_TYPE = 'IN' --AND PAY_MT_ITEM.ITEM_CALALLW='Y' 
			
			PRINT 'Allowance: ' + CAST(@allowance AS varchar(30))

			SET @allowance = @allowance / 30

			PRINT 'Allowance/day: ' + CAST(@allowance AS varchar(30))

			SET @wage = @wage + @allowance

			--PRINT (@wage / @worker_hrs)
			--PRINT (@timecard_late / CONVERT(decimal(4,2), 60)) 
		
			DECLARE @leave_amount decimal (8, 2) = (@timecard_leave / CONVERT(decimal(4,2), 60)) * (@wage / @worker_hrs)	
		
			PRINT 'Leave (amount) : ' + CAST(@leave_amount AS varchar(30))

			IF (EXISTS(SELECT * FROM ATT_TR_WAGEDAY WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code AND WAGEDAY_DATE = @timecard_date AND PROJECT_CODE=@project_code AND PROJOB_CODE=@projob_code)) 	BEGIN
				UPDATE ATT_TR_WAGEDAY SET LEAVE_AMOUNT = @leave_amount, LEAVE_MIN = @timecard_leave, MODIFIED_BY = @TaskBy, MODIFIED_DATE = getdate()
				WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code AND WAGEDAY_DATE = @timecard_date AND PROJECT_CODE=@project_code AND PROJOB_CODE=@projob_code
			END
			ELSE BEGIN
				INSERT INTO ATT_TR_WAGEDAY (COMPANY_CODE, WORKER_CODE, WAGEDAY_DATE, LEAVE_AMOUNT, LEAVE_MIN, CREATED_BY, CREATED_DATE, FLAG, PROJECT_CODE, PROJOB_CODE)
				VALUES(@company_code, @worker_code, @timecard_date, @leave_amount, @timecard_leave, @TaskBy, getdate(), '0', @project_code, @projob_code)
			END
															
		FETCH NEXT FROM cur_day INTO @timecard_date, @timecard_daytype, @timecard_leave, @project_code, @projob_code
		END 
	CLOSE cur_day 
	DEALLOCATE cur_day
END
GO


IF EXISTS (SELECT * FROM sysobjects WHERE name = 'ATT_PRO_CALOT') 
BEGIN 
DROP PROCEDURE ATT_PRO_CALOT 
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ATT_PRO_CALOT]
(
    @CompanyCode varchar (5)
	, @WorkerCode varchar (30)
	, @Fromdate datetime
	, @Todate datetime
	, @Paydate datetime
	, @TaskBy varchar (30)
)
AS
BEGIN

	DECLARE @company_code varchar (5) = @CompanyCode
	DECLARE @worker_code varchar (30) = @WorkerCode
	DECLARE @from_date datetime = @Fromdate
	DECLARE @to_date datetime = @Todate
	DECLARE @pay_date datetime = @Paydate

	-- Get worker detail
	DECLARE @worker_emptype varchar (1)
	DECLARE @worker_hrs decimal(3, 2)
	DECLARE @worker_hiredate datetime
	DECLARE @worker_resigndate datetime
	SELECT TOP 1 @worker_emptype = ISNULL(WORKER_TYPE, 'M'), @worker_hiredate = WORKER_HIREDATE, @worker_resigndate = ISNULL(WORKER_RESIGNDATE, '01/01/2999'), @worker_hrs = ISNULL(HRS_PERDAY, 8) 
	FROM EMP_MT_WORKER WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code
					

	-- Step 1 Get policy Overtime
	DECLARE @policy_ot varchar (20) = ''
	SELECT TOP 1 @policy_ot = ISNULL(EMPPOLATT_POLICY_CODE, '') 
	FROM ATT_TR_EMPPOLATT 
	WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code
	AND EMPPOLATT_POLICY_TYPE = 'OT'

	IF @policy_ot <> '' BEGIN

		DECLARE @normal_rate_before decimal(5, 2) = 0
		DECLARE @normal_rate_normal decimal(5, 2) = 0
		DECLARE @normal_rate_break decimal(5, 2) = 0
		DECLARE @normal_rate_after decimal(5, 2) = 0

		DECLARE @offday_rate_before decimal(5, 2) = 0
		DECLARE @offday_rate_normal decimal(5, 2) = 0
		DECLARE @offday_rate_break decimal(5, 2) = 0
		DECLARE @offday_rate_after decimal(5, 2) = 0

		DECLARE @companyday_rate_before decimal(5, 2) = 0
		DECLARE @companyday_rate_normal decimal(5, 2) = 0
		DECLARE @companyday_rate_break decimal(5, 2) = 0
		DECLARE @companyday_rate_after decimal(5, 2) = 0

		DECLARE @holidayday_rate_before decimal(5, 2) = 0
		DECLARE @holidayday_rate_normal decimal(5, 2) = 0
		DECLARE @holidayday_rate_break decimal(5, 2) = 0
		DECLARE @holidayday_rate_after decimal(5, 2) = 0

		SELECT @normal_rate_before = ISNULL(RATEOT_BEFORE, 0), @normal_rate_normal = ISNULL(RATEOT_NORMAL, 0), @normal_rate_break = ISNULL(RATEOT_BREAK, 0), @normal_rate_after = ISNULL(RATEOT_AFTER, 0)
		FROM ATT_TR_RATEOT WHERE COMPANY_CODE = @company_code AND RATEOT_CODE = @policy_ot AND RATEOT_DAYTYPE = 'N'

		SELECT @offday_rate_before = ISNULL(RATEOT_BEFORE, 0), @offday_rate_normal = ISNULL(RATEOT_NORMAL, 0), @offday_rate_break = ISNULL(RATEOT_BREAK, 0), @offday_rate_after = ISNULL(RATEOT_AFTER, 0)
		FROM ATT_TR_RATEOT WHERE COMPANY_CODE = @company_code AND RATEOT_CODE = @policy_ot AND RATEOT_DAYTYPE = 'O'

		SELECT @companyday_rate_before = ISNULL(RATEOT_BEFORE, 0), @companyday_rate_normal = ISNULL(RATEOT_NORMAL, 0), @companyday_rate_break = ISNULL(RATEOT_BREAK, 0), @companyday_rate_after = ISNULL(RATEOT_AFTER, 0)
		FROM ATT_TR_RATEOT WHERE COMPANY_CODE = @company_code AND RATEOT_CODE = @policy_ot AND RATEOT_DAYTYPE = 'C'

		SELECT @holidayday_rate_before = ISNULL(RATEOT_BEFORE, 0), @holidayday_rate_normal = ISNULL(RATEOT_NORMAL, 0), @holidayday_rate_break = ISNULL(RATEOT_BREAK, 0), @holidayday_rate_after = ISNULL(RATEOT_AFTER, 0)
		FROM ATT_TR_RATEOT WHERE COMPANY_CODE = @company_code AND RATEOT_CODE = @policy_ot AND RATEOT_DAYTYPE = 'H'

		--PRINT '*** Normal ***'
		--PRINT 'Before : ' + CAST(@normal_rate_before AS varchar(30))
		--PRINT 'Normal : ' + CAST(@normal_rate_normal AS varchar(30))
		--PRINT 'Break : ' + CAST(@normal_rate_break AS varchar(30))
		--PRINT 'After : ' + CAST(@normal_rate_after AS varchar(30))
		--PRINT ''
		--PRINT '*** Offday ***'
		--PRINT 'Before : ' + CAST(@offday_rate_before AS varchar(30))
		--PRINT 'Normal : ' + CAST(@offday_rate_normal AS varchar(30))
		--PRINT 'Break : ' + CAST(@offday_rate_break AS varchar(30))
		--PRINT 'After : ' + CAST(@offday_rate_after AS varchar(30))
		--PRINT ''
		--PRINT '*** Holiday ***'
		--PRINT 'Before : ' + CAST(@holidayday_rate_before AS varchar(30))
		--PRINT 'Normal : ' + CAST(@holidayday_rate_normal AS varchar(30))
		--PRINT 'Break : ' + CAST(@holidayday_rate_break AS varchar(30))
		--PRINT 'After : ' + CAST(@holidayday_rate_after AS varchar(30))
		--PRINT ''
		--PRINT '*** Companyday ***'
		--PRINT 'Before : ' + CAST(@companyday_rate_before AS varchar(30))
		--PRINT 'Normal : ' + CAST(@companyday_rate_normal AS varchar(30))
		--PRINT 'Break : ' + CAST(@companyday_rate_break AS varchar(30))
		--PRINT 'After : ' + CAST(@companyday_rate_after AS varchar(30))
		--PRINT ''

		-- Step 2 Loop day 
		DECLARE @timecard_date datetime
		DECLARE @timecard_daytype varchar (1) 
		DECLARE @timecard_before int = 0
		DECLARE @timecard_normal int = 0
		DECLARE @timecard_break int = 0
		DECLARE @timecard_after int = 0

		DECLARE @project_code varchar (20)
		DECLARE @projob_code varchar (20)

		DECLARE cur_day CURSOR FOR
		SELECT TIMECARD_WORKDATE, TIMECARD_DAYTYPE, TIMECARD_BEFORE_MIN_APP,  TIMECARD_WORK1_MIN_APP + TIMECARD_WORK2_MIN_APP, TIMECARD_BREAK_MIN_APP, TIMECARD_AFTER_MIN_APP, ISNULL(PROJECT_CODE, ''), ISNULL(PROJOB_CODE, '')
		FROM ATT_TR_TIMECARD
		WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code						
		AND TIMECARD_WORKDATE BETWEEN @from_date AND @to_date
		

		OPEN cur_day 
			FETCH NEXT FROM cur_day INTO @timecard_date, @timecard_daytype, @timecard_before, @timecard_normal, @timecard_break, @timecard_after, @project_code, @projob_code
			WHILE @@FETCH_STATUS = 0 
			BEGIN 

				--PRINT '==== ' + CAST(@timecard_date AS varchar(30))
				--PRINT 'Daytype : ' + @timecard_daytype
				--PRINT 'Before (min): ' + CAST(@timecard_before AS varchar(30))
				--PRINT 'Normal (min): ' + CAST(@timecard_normal AS varchar(30))
				--PRINT 'Break (min): ' + CAST(@timecard_break AS varchar(30))
				--PRINT 'After (min): ' + CAST(@timecard_after AS varchar(30))

				-- Get wage
				DECLARE @wage decimal(12, 2) = 0		
				SELECT TOP 1 @wage = ISNULL(EMPSALARY_AMOUNT, 0) 
				FROM EMP_TR_SALARY 
				WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code AND EMPSALARY_DATE <= @timecard_date 
				ORDER BY EMPSALARY_DATE DESC

				IF @worker_emptype = 'M' BEGIN
					SET @wage = @wage / 30
				END

				DECLARE @allowance decimal(12, 2) = 0	

				SELECT @allowance=ISNULL(SUM(PAYITEM_AMOUNT), 0) 
				FROM PAY_TR_PAYITEM 
				INNER JOIN PAY_MT_ITEM ON PAY_TR_PAYITEM.COMPANY_CODE=PAY_MT_ITEM.COMPANY_CODE AND PAY_TR_PAYITEM.ITEM_CODE=PAY_MT_ITEM.ITEM_CODE
				WHERE PAY_TR_PAYITEM.COMPANY_CODE=@company_code AND PAY_TR_PAYITEM.WORKER_CODE=@worker_code  AND PAY_TR_PAYITEM.PAYITEM_DATE=@pay_date
				AND PAY_MT_ITEM.ITEM_TYPE = 'IN' AND PAY_MT_ITEM.ITEM_CALOT='Y' 
			
				--PRINT 'Allowance: ' + CAST(@allowance AS varchar(30))

				SET @allowance = @allowance / 30

				--PRINT 'Allowance/day: ' + CAST(@allowance AS varchar(30))

				SET @wage = @wage + @allowance

				--PRINT 'Wage/day: ' + CAST(@wage AS varchar(30))

				-- Calculate
				DECLARE @ot_before decimal(12, 2) = 0
				DECLARE @ot_normal decimal(12, 2) = 0
				DECLARE @ot_break decimal(12, 2) = 0
				DECLARE @ot_after decimal(12, 2) = 0

				DECLARE @before_rate decimal(5, 2) = 0
				DECLARE @normal_rate decimal(5, 2) = 0
				DECLARE @break_rate decimal(5, 2) = 0
				DECLARE @after_rate decimal(5, 2) = 0

				IF @timecard_daytype = 'N' BEGIN
					 SET @before_rate = @normal_rate_before
					 --SET @normal_rate = @normal_rate_normal
					 SET @break_rate = @normal_rate_break
					 SET @after_rate = @normal_rate_after
				END
				IF @timecard_daytype = 'O' BEGIN
					 SET @before_rate = @offday_rate_before
					 SET @normal_rate = @offday_rate_normal
					 SET @break_rate = @offday_rate_break
					 SET @after_rate = @offday_rate_after
				END
				IF @timecard_daytype = 'C' BEGIN
					 SET @before_rate = @companyday_rate_before
					 SET @normal_rate = @companyday_rate_normal
					 SET @break_rate = @companyday_rate_break
					 SET @after_rate = @companyday_rate_after
				END
				IF @timecard_daytype = 'H' BEGIN
					 SET @before_rate = @holidayday_rate_before
					 SET @normal_rate = @holidayday_rate_normal
					 SET @break_rate = @holidayday_rate_break
					 SET @after_rate = @holidayday_rate_after
				END

				SET @ot_before = @before_rate * (@timecard_before / CONVERT(decimal(4,2), 60)) * (@wage / @worker_hrs)
				SET @ot_normal = @normal_rate * (@timecard_normal / CONVERT(decimal(4,2), 60)) * (@wage / @worker_hrs)
				SET @ot_break = @break_rate * (@timecard_break / CONVERT(decimal(4,2), 60)) * (@wage / @worker_hrs)
				SET @ot_after = @after_rate * (@timecard_after / CONVERT(decimal(4,2), 60)) * (@wage / @worker_hrs)

				--PRINT 'Before (rate): ' + CAST(@before_rate AS varchar(30)) + ' ==> ' + CAST(@ot_before AS varchar(30))
				--PRINT 'Normal (rate): ' + CAST(@normal_rate AS varchar(30)) + ' ==> ' + CAST(@ot_normal AS varchar(30))
				--PRINT 'Break (rate): ' + CAST(@break_rate AS varchar(30)) + ' ==> ' + CAST(@ot_break AS varchar(30))
				--PRINT 'After (rate): ' + CAST(@after_rate AS varchar(30)) + ' ==> ' + CAST(@ot_after AS varchar(30))

				-- Seperate to rate
				DECLARE @ot_rate1 decimal(12, 2) = 0
				DECLARE @ot_rate15 decimal(12, 2) = 0
				DECLARE @ot_rate2 decimal(12, 2) = 0
				DECLARE @ot_rate3 decimal(12, 2) = 0

				DECLARE @ot_rate1_min int = 0
				DECLARE @ot_rate15_min int = 0
				DECLARE @ot_rate2_min int = 0
				DECLARE @ot_rate3_min int = 0

				SET @ot_rate1 = @ot_rate1 + (SELECT CASE WHEN @before_rate IN (0.5, 1.0) THEN @ot_before ELSE 0 END)
				SET @ot_rate1 = @ot_rate1 + (SELECT CASE WHEN @normal_rate IN (0.5, 1.0) THEN @ot_normal ELSE 0 END)
				SET @ot_rate1 = @ot_rate1 + (SELECT CASE WHEN @break_rate IN (0.5, 1.0) THEN @ot_break ELSE 0 END)
				SET @ot_rate1 = @ot_rate1 + (SELECT CASE WHEN @after_rate IN (0.5, 1.0) THEN @ot_after ELSE 0 END)

				SET @ot_rate15 = @ot_rate15 + (SELECT CASE WHEN @before_rate IN (1.5) THEN @ot_before ELSE 0 END)
				SET @ot_rate15 = @ot_rate15 + (SELECT CASE WHEN @normal_rate IN (1.5) THEN @ot_normal ELSE 0 END)
				SET @ot_rate15 = @ot_rate15 + (SELECT CASE WHEN @break_rate IN (1.5) THEN @ot_break ELSE 0 END)
				SET @ot_rate15 = @ot_rate15 + (SELECT CASE WHEN @after_rate IN (1.5) THEN @ot_after ELSE 0 END)

				SET @ot_rate2 = @ot_rate2 + (SELECT CASE WHEN @before_rate IN (2) THEN @ot_before ELSE 0 END)
				SET @ot_rate2 = @ot_rate2 + (SELECT CASE WHEN @normal_rate IN (2) THEN @ot_normal ELSE 0 END)
				SET @ot_rate2 = @ot_rate2 + (SELECT CASE WHEN @break_rate IN (2) THEN @ot_break ELSE 0 END)
				SET @ot_rate2 = @ot_rate2 + (SELECT CASE WHEN @after_rate IN (2) THEN @ot_after ELSE 0 END)

				SET @ot_rate3 = @ot_rate3 + (SELECT CASE WHEN @before_rate IN (3) THEN @ot_before ELSE 0 END)
				SET @ot_rate3 = @ot_rate3 + (SELECT CASE WHEN @normal_rate IN (3) THEN @ot_normal ELSE 0 END)
				SET @ot_rate3 = @ot_rate3 + (SELECT CASE WHEN @break_rate IN (3) THEN @ot_break ELSE 0 END)
				SET @ot_rate3 = @ot_rate3 + (SELECT CASE WHEN @after_rate IN (3) THEN @ot_after ELSE 0 END)
				--
				SET @ot_rate1_min = @ot_rate1_min + (SELECT CASE WHEN @before_rate IN (0.5, 1.0) THEN @timecard_before ELSE 0 END)
				SET @ot_rate1_min = @ot_rate1_min + (SELECT CASE WHEN @normal_rate IN (0.5, 1.0) THEN @timecard_normal ELSE 0 END)
				SET @ot_rate1_min = @ot_rate1_min + (SELECT CASE WHEN @break_rate IN (0.5, 1.0) THEN @timecard_break ELSE 0 END)
				SET @ot_rate1_min = @ot_rate1_min + (SELECT CASE WHEN @after_rate IN (0.5, 1.0) THEN @timecard_after ELSE 0 END)

				SET @ot_rate15_min = @ot_rate15_min + (SELECT CASE WHEN @before_rate IN (1.5) THEN @timecard_before ELSE 0 END)
				SET @ot_rate15_min = @ot_rate15_min + (SELECT CASE WHEN @normal_rate IN (1.5) THEN @timecard_normal ELSE 0 END)
				SET @ot_rate15_min = @ot_rate15_min + (SELECT CASE WHEN @break_rate IN (1.5) THEN @timecard_break ELSE 0 END)
				SET @ot_rate15_min = @ot_rate15_min + (SELECT CASE WHEN @after_rate IN (1.5) THEN @timecard_after ELSE 0 END)

				SET @ot_rate2_min = @ot_rate2_min + (SELECT CASE WHEN @before_rate IN (2) THEN @timecard_before ELSE 0 END)
				SET @ot_rate2_min = @ot_rate2_min + (SELECT CASE WHEN @normal_rate IN (2) THEN @timecard_normal ELSE 0 END)
				SET @ot_rate2_min = @ot_rate2_min + (SELECT CASE WHEN @break_rate IN (2) THEN @timecard_break ELSE 0 END)
				SET @ot_rate2_min = @ot_rate2_min + (SELECT CASE WHEN @after_rate IN (2) THEN @timecard_after ELSE 0 END)

				SET @ot_rate3_min = @ot_rate3_min + (SELECT CASE WHEN @before_rate IN (3) THEN @timecard_before ELSE 0 END)
				SET @ot_rate3_min = @ot_rate3_min + (SELECT CASE WHEN @normal_rate IN (3) THEN @timecard_normal ELSE 0 END)
				SET @ot_rate3_min = @ot_rate3_min + (SELECT CASE WHEN @break_rate IN (3) THEN @timecard_break ELSE 0 END)
				SET @ot_rate3_min = @ot_rate3_min + (SELECT CASE WHEN @after_rate IN (3) THEN @timecard_after ELSE 0 END)

				--PRINT 'OT 1.0 : ' + CAST(@ot_rate1 AS varchar(30))
				--PRINT 'OT 1.5 : ' + CAST(@ot_rate15 AS varchar(30))
				--PRINT 'OT 2.0 : ' + CAST(@ot_rate2 AS varchar(30))
				--PRINT 'OT 3.0 ' + CAST(@ot_rate3 AS varchar(30))

				--SELECT @ot_rate1=Result FROM dbo.HRM_FNT_ROUND_AMOUNT(@company_code, @ot_rate1, 'OT_DAY')
				--SELECT @ot_rate15=Result FROM dbo.HRM_FNT_ROUND_AMOUNT(@company_code, @ot_rate15, 'OT_DAY')
				--SELECT @ot_rate2=Result FROM dbo.HRM_FNT_ROUND_AMOUNT(@company_code, @ot_rate2, 'OT_DAY')
				--SELECT @ot_rate3=Result FROM dbo.HRM_FNT_ROUND_AMOUNT(@company_code, @ot_rate3, 'OT_DAY')

				IF (EXISTS(SELECT * FROM ATT_TR_WAGEDAY WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code AND WAGEDAY_DATE = @timecard_date AND PROJECT_CODE=@project_code AND PROJOB_CODE=@projob_code)) 	BEGIN 
					UPDATE ATT_TR_WAGEDAY SET WAGEDAY_WAGE = @wage
					, WAGEDAY_BEFORE_RATE = @before_rate
					, WAGEDAY_NORMAL_RATE = @normal_rate
					, WAGEDAY_BREAK_RATE = @break_rate
					, WAGEDAY_AFTER_RATE = @after_rate

					, WAGEDAY_BEFORE_MIN = @timecard_before
					, WAGEDAY_NORMAL_MIN = @timecard_normal
					, WAGEDAY_BREAK_MIN = @timecard_break
					, WAGEDAY_AFTER_MIN = @timecard_after

					, WAGEDAY_BEFORE_AMOUNT = @ot_before
					, WAGEDAY_NORMAL_AMOUNT = @ot_normal
					, WAGEDAY_BREAK_AMOUNT = @ot_break
					, WAGEDAY_AFTER_AMOUNT = @ot_after

					, OT1_MIN = @ot_rate1_min
					, OT15_MIN = @ot_rate15_min
					, OT2_MIN = @ot_rate2_min
					, OT3_MIN = @ot_rate3_min

					, OT1_AMOUNT = @ot_rate1
					, OT15_AMOUNT = @ot_rate15
					, OT2_AMOUNT = @ot_rate2
					, OT3_AMOUNT = @ot_rate3

					, MODIFIED_BY = @TaskBy
					, MODIFIED_DATE = getdate()

					WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code AND WAGEDAY_DATE = @timecard_date AND PROJECT_CODE=@project_code AND PROJOB_CODE=@projob_code

				END
				ELSE BEGIN
					INSERT INTO ATT_TR_WAGEDAY (COMPANY_CODE, WORKER_CODE, WAGEDAY_DATE
						, WAGEDAY_WAGE
						, WAGEDAY_BEFORE_RATE
						, WAGEDAY_NORMAL_RATE
						, WAGEDAY_BREAK_RATE
						, WAGEDAY_AFTER_RATE

						, WAGEDAY_BEFORE_MIN
						, WAGEDAY_NORMAL_MIN
						, WAGEDAY_BREAK_MIN
						, WAGEDAY_AFTER_MIN

						, WAGEDAY_BEFORE_AMOUNT
						, WAGEDAY_NORMAL_AMOUNT
						, WAGEDAY_BREAK_AMOUNT
						, WAGEDAY_AFTER_AMOUNT

						, OT1_MIN
						, OT15_MIN
						, OT2_MIN
						, OT3_MIN

						, OT1_AMOUNT
						, OT15_AMOUNT
						, OT2_AMOUNT
						, OT3_AMOUNT		

						, CREATED_BY
						, CREATED_DATE
						, FLAG
						, PROJECT_CODE, PROJOB_CODE
					)
					VALUES(@company_code, @worker_code, @timecard_date
						, @wage
						, @before_rate
						, @normal_rate
						, @break_rate
						, @after_rate

						, @timecard_before
						, @timecard_normal
						, @timecard_break
						, @timecard_after

						, @ot_before
						, @ot_normal
						, @ot_break
						, @ot_after

						, @ot_rate1_min
						, @ot_rate15_min
						, @ot_rate2_min
						, @ot_rate3_min

						, @ot_rate1
						, @ot_rate15
						, @ot_rate2
						, @ot_rate3

						, @TaskBy
						, getdate()
						, '0'
						, @project_code, @projob_code
					)

				END

									
			FETCH NEXT FROM cur_day INTO @timecard_date, @timecard_daytype, @timecard_before, @timecard_normal, @timecard_break, @timecard_after, @project_code, @projob_code
			END 
		CLOSE cur_day 
		DEALLOCATE cur_day
		
	END
END
GO


IF EXISTS (SELECT * FROM sysobjects WHERE name = 'ATT_PRO_CALSALARY_PERDAY') 
BEGIN 
DROP PROCEDURE ATT_PRO_CALSALARY_PERDAY 
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[ATT_PRO_CALSALARY_PERDAY]
(
    @CompanyCode varchar (5)
	, @WorkerCode varchar (30)
	, @Fromdate datetime
	, @Todate datetime
	, @TaskBy varchar (30)
)
AS
BEGIN

	DECLARE @company_code varchar (5) = @CompanyCode
	DECLARE @worker_code varchar (30) = @WorkerCode
	DECLARE @from_date datetime = @Fromdate
	DECLARE @to_date datetime = @Todate

	-- Get worker detail
	DECLARE @worker_emptype varchar (1)
	DECLARE @worker_hrs decimal(3, 2)
	DECLARE @worker_hiredate datetime
	DECLARE @worker_resigndate datetime
	SELECT TOP 1 @worker_emptype = ISNULL(WORKER_TYPE, 'M'), @worker_hiredate = WORKER_HIREDATE, @worker_resigndate = ISNULL(WORKER_RESIGNDATE, '01/01/2999'), @worker_hrs = ISNULL(HRS_PERDAY, 8) 
	FROM EMP_MT_WORKER WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code					

	-- Step 2 Loop day 
	DECLARE @timecard_date datetime
	DECLARE @timecard_daytype varchar (1) 
	DECLARE @timecard_before int = 0
	DECLARE @timecard_normal int = 0
	DECLARE @timecard_break int = 0
	DECLARE @timecard_after int = 0

	DECLARE @project_code varchar (20)
	DECLARE @projob_code varchar (20)


	DECLARE cur_day CURSOR FOR
	SELECT PROJECT_CODE, PROJOB_CODE, TIMECARD_WORKDATE, TIMECARD_DAYTYPE, TIMECARD_BEFORE_MIN_APP, TIMECARD_WORK1_MIN_APP + TIMECARD_WORK2_MIN_APP, TIMECARD_BREAK_MIN_APP, TIMECARD_AFTER_MIN_APP
	FROM ATT_TR_TIMECARD
	WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code						
	AND TIMECARD_WORKDATE BETWEEN @from_date AND @to_date

	OPEN cur_day 
		FETCH NEXT FROM cur_day INTO @project_code, @projob_code, @timecard_date, @timecard_daytype, @timecard_before, @timecard_normal, @timecard_break, @timecard_after
		WHILE @@FETCH_STATUS = 0 
		BEGIN 

			PRINT '==== ' + CAST(@timecard_date AS varchar(30))
			PRINT 'Daytype : ' + @timecard_daytype
			PRINT 'Project : ' + @project_code
			PRINT 'Job : ' + @projob_code

			DECLARE @wage decimal(12, 2) = 0
			DECLARE @wage_type char(1)
			-- Get wage
			IF LEN(TRIM(@projob_code)) > 0 BEGIN

				SELECT TOP 1 @wage = PRO_TR_PROJOBCOST.PROJOBCOST_AMOUNT, @wage_type = PRO_MT_PROCOST.PROCOST_TYPE
				FROM PRO_TR_PROJOBCOST 
				INNER JOIN PRO_MT_PROJOBVERSION ON PRO_TR_PROJOBCOST.PROJECT_CODE=PRO_MT_PROJOBVERSION.PROJECT_CODE AND PRO_TR_PROJOBCOST.VERSION=PRO_MT_PROJOBVERSION.VERSION
				INNER JOIN PRO_MT_PROCOST ON PRO_TR_PROJOBCOST.PROJOBCOST_CODE=PRO_MT_PROCOST.PROCOST_CODE
				WHERE PRO_MT_PROCOST.COMPANY_CODE=@company_code AND PRO_TR_PROJOBCOST.PROJECT_CODE=@project_code AND PROJOB_CODE=@projob_code
				AND @timecard_date BETWEEN PRO_MT_PROJOBVERSION.FROMDATE AND PRO_MT_PROJOBVERSION.TODATE
				AND PRO_MT_PROCOST.PROCOST_ITEMCODE LIKE 'SA%'

				IF @wage_type = 'M' BEGIN
					SET @wage = @wage / 30
				END

			END
			ELSE BEGIN
				SET @wage = 0

				--SELECT TOP 1 @wage = ISNULL(EMPSALARY_AMOUNT, 0) 
				--FROM HRM_TR_EMPSALARY 
				--WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code AND EMPSALARY_DATE <= @timecard_date 
				--ORDER BY EMPSALARY_DATE DESC

				--IF @worker_emptype = 'M' BEGIN
				--	SET @wage = @wage / 30
				--END

				--IF @worker_emptype = 'D' BEGIN
			
				--	IF @timecard_daytype = 'A' BEGIN
				--		SET @wage = 0
				--	END

				--	IF @timecard_daytype = 'N' OR @timecard_daytype = 'L' BEGIN
				--		SET @wage = (@wage / @worker_hrs) * (@timecard_normal / 60)
				--	END

				--END		
			END
					
			PRINT 'Wage/day: ' + CAST(@wage AS varchar(30))
				
			IF (EXISTS(SELECT * FROM ATT_TR_WAGEDAY WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code AND PROJECT_CODE = @project_code AND PROJOB_CODE = @projob_code AND WAGEDAY_DATE = @timecard_date)) 	BEGIN 
				UPDATE ATT_TR_WAGEDAY SET WAGEDAY_WAGE = @wage			
				, MODIFIED_BY = @TaskBy
				, MODIFIED_DATE = getdate()

				WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code AND WAGEDAY_DATE = @timecard_date
				AND PROJECT_CODE = @project_code AND PROJOB_CODE = @projob_code

			END
			ELSE BEGIN
				INSERT INTO ATT_TR_WAGEDAY (COMPANY_CODE, WORKER_CODE, PROJECT_CODE, PROJOB_CODE, WAGEDAY_DATE
					, WAGEDAY_WAGE				
					, CREATED_BY
					, CREATED_DATE
					, FLAG
				)
				VALUES(@company_code, @worker_code, @project_code, @projob_code
					, @timecard_date
					, @wage				
					, @TaskBy
					, getdate()
					, '0'
				)

			END

									
		FETCH NEXT FROM cur_day INTO @project_code, @projob_code, @timecard_date, @timecard_daytype, @timecard_before, @timecard_normal, @timecard_break, @timecard_after
		END 
	CLOSE cur_day 
	DEALLOCATE cur_day
END
GO



IF EXISTS (SELECT * FROM sysobjects WHERE name = 'ATT_PRO_CALTIME') 
BEGIN 
DROP PROCEDURE ATT_PRO_CALTIME 
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ATT_PRO_CALTIME]
(
    @CompanyCode varchar (5)
	, @TaskID varchar (15)	
)
AS
BEGIN 

	DECLARE @company_code varchar (5) = @CompanyCode
	DECLARE @task_id varchar (30) = @TaskID
	--********************************************
	-- STEP 1 get task 
	--********************************************
	DECLARE @task_type varchar (10) = ''
	DECLARE @task_by varchar (20) = ''
	SELECT @task_type = TASK_TYPE, @task_by=ISNULL(MODIFIED_BY, CREATED_BY) FROM SYS_MT_TASK WHERE COMPANY_CODE = @company_code AND TASK_ID = @task_id

	PRINT @task_type

	--********************************************
	-- STEP 2 get task detail 
	--********************************************
	DECLARE @task_process varchar (200) = ''
	DECLARE @task_fromdate datetime
	DECLARE @task_todate datetime
	DECLARE @task_paydate datetime

	DECLARE @task_start datetime = getdate()

	SELECT @task_process = TASKDETAIL_PROCESS, @task_fromdate = TASKDETAIL_FROMDATE, @task_todate = TASKDETAIL_TODATE, @task_paydate = TASKDETAIL_PAYDATE 
	FROM SYS_TR_TASKDETAIL WHERE TASK_ID = @task_id


	DECLARE @table_process TABLE(process varchar (30)) 

	IF @task_process != '' BEGIN
		-- Start spilt calculate type
		WHILE LEN(@task_process) > 0
		BEGIN
			DECLARE @temp VARCHAR(20)
			IF CHARINDEX(',', @task_process) > 0 BEGIN
				SET  @temp = SUBSTRING(@task_process, 0, CHARINDEX(',', @task_process))
			END
			ELSE BEGIN
				-- last item
				SET @temp = @task_process
				SET @task_process = ''
			END			
			INSERT INTO @table_process VALUES(@temp)  
			-- Replace
			SET @task_process = REPLACE(@task_process, @temp + ',', '')	 
		END
		-- End spilt calculate type
	   	 
		-- **************************
		-- Start Loop Calculate type
		-- **************************	
		DECLARE @process varchar (20) = ''
		DECLARE cur_type CURSOR FOR 	
		SELECT process   
		FROM @table_process		
		--
		OPEN cur_type 
		FETCH NEXT FROM cur_type INTO @process
		WHILE @@FETCH_STATUS = 0 
		BEGIN 

			PRINT 'PROCESS:: ' + @process

			--********************************************
			-- STEP 3 get task whose 
			--********************************************
			DECLARE @worker_code varchar (15)
			DECLARE cur_whose CURSOR FOR 
			SELECT WORKER_CODE
			FROM SYS_TR_TASKWHOSE
			WHERE TASK_ID = @task_id

			OPEN cur_whose 
				FETCH NEXT FROM cur_whose INTO @worker_code
				WHILE @@FETCH_STATUS = 0 
				BEGIN 

					PRINT '==> ' + @worker_code

					-- Get Item code
					DECLARE @item_sa varchar (20) = ''
					DECLARE @item_ot varchar (20) = ''
					DECLARE @item_aw varchar (20) = ''
					DECLARE @item_dg varchar (20) = ''
					DECLARE @item_lv varchar (20) = ''
					DECLARE @item_ab varchar (20) = ''
					DECLARE @item_lt varchar (20) = ''

					SELECT @item_sa = ISNULL(EMPATTITEM_SA, '')
					, @item_ot = ISNULL(EMPATTITEM_OT, '')
					, @item_aw = ISNULL(EMPATTITEM_AW, '')
					, @item_dg = ISNULL(EMPATTITEM_DG, '')
					, @item_lv = ISNULL(EMPATTITEM_LV, '')
					, @item_ab = ISNULL(EMPATTITEM_AB, '')
					, @item_lt = ISNULL(EMPATTITEM_LT, '')
					FROM ATT_TR_EMPATTITEM
					WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code

					DECLARE @worker_emptype varchar (1)
					DECLARE @worker_hrs decimal(3, 2)
					DECLARE @worker_hiredate datetime
					DECLARE @worker_resigndate datetime
					SELECT TOP 1 @worker_emptype = ISNULL(WORKER_TYPE, 'M'), @worker_hiredate = WORKER_HIREDATE, @worker_resigndate = ISNULL(WORKER_RESIGNDATE, '01/01/2999'), @worker_hrs = ISNULL(HRS_PERDAY, 8) 
					FROM EMP_MT_WORKER WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code	
									
					IF @process = 'SA' and @item_sa <> '' BEGIN			
					
						EXEC dbo.ATT_PRO_CALSALARY_PERDAY @company_code, @worker_code, @task_fromdate, @task_todate, @task_by


						DECLARE @salary_amount decimal(12, 2) = 0
						DECLARE @salary_quantity decimal(5, 2) = 0

						IF @worker_emptype = 'M' BEGIN
							SELECT @salary_amount = ISNULL(Salary, 0), @salary_quantity = ISNULL(Working, 0) FROM dbo.ATT_FNT_GETSALARY(@company_code, @worker_code, @task_fromdate, @task_todate, @task_paydate)
							
						END
						ELSE BEGIN
							SELECT @salary_amount = ISNULL(SUM(ISNULL(WAGEDAY_WAGE, 0)), 0)
							FROM ATT_TR_WAGEDAY
							WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code 
							AND (WAGEDAY_DATE BETWEEN @task_fromdate AND @task_todate)

							SELECT @salary_amount = ISNULL(COUNT(ISNULL(WAGEDAY_WAGE, 0)), 0)
							FROM ATT_TR_WAGEDAY
							WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code 
							AND (WAGEDAY_DATE BETWEEN @task_fromdate AND @task_todate)
							AND WAGEDAY_WAGE > 0
						END
						
						PRINT 'salary : ' + CAST(@salary_amount AS varchar(30))
						PRINT 'working : ' + CAST(@salary_quantity AS varchar(30))

						DELETE FROM PAY_TR_PAYITEM 
						WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code AND PAYITEM_DATE = @task_paydate AND ITEM_CODE = @item_sa

						IF @salary_amount > 0 BEGIN
							INSERT INTO PAY_TR_PAYITEM (COMPANY_CODE, WORKER_CODE, ITEM_CODE, PAYITEM_DATE, PAYITEM_AMOUNT, PAYITEM_QUANTITY, PAYITEM_PAYTYPE, CREATED_BY, CREATED_DATE, FLAG)
							VALUES (@company_code, @worker_code, @item_sa, @task_paydate, @salary_amount, @salary_quantity, 'B', @task_by, getdate(), '0')
						END

					END -- IF @process = 'SA'		

					IF @process = 'OT' and @item_ot <> '' BEGIN

						EXEC dbo.ATT_PRO_CALOT @company_code, @worker_code, @task_fromdate, @task_todate, @task_paydate, @task_by

						DECLARE @overtime_amount decimal (10, 2) = 0
						DECLARE @overtime_quantity decimal (5, 2) = 0
						DECLARE @overtime_min int = 0

						SELECT @overtime_amount = ISNULL(SUM(ISNULL(OT1_AMOUNT, 0) + ISNULL(OT15_AMOUNT, 0) + ISNULL(OT2_AMOUNT, 0) + ISNULL(OT3_AMOUNT, 0)), 0) 
						, @overtime_min = ISNULL(SUM(ISNULL(OT1_MIN, 0) + ISNULL(OT15_MIN, 0) + ISNULL(OT2_MIN, 0) + ISNULL(OT3_MIN, 0)), 0) 
						FROM ATT_TR_WAGEDAY
						WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code 
						AND (WAGEDAY_DATE BETWEEN @task_fromdate AND @task_todate)

						SET @overtime_quantity = @overtime_min / 60

						SELECT @overtime_amount=Result FROM dbo.ATT_FNT_ROUND_AMOUNT(@company_code, @overtime_amount, 'OT_SUMMARY')

						DELETE FROM PAY_TR_PAYITEM 
						WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code AND PAYITEM_DATE = @task_paydate AND ITEM_CODE = @item_ot

						IF @overtime_amount > 0 BEGIN
							INSERT INTO PAY_TR_PAYITEM (COMPANY_CODE, WORKER_CODE, ITEM_CODE, PAYITEM_DATE, PAYITEM_AMOUNT, PAYITEM_QUANTITY, PAYITEM_PAYTYPE, CREATED_BY, CREATED_DATE, FLAG)
							VALUES (@company_code, @worker_code, @item_ot, @task_paydate, @overtime_amount, @overtime_quantity, 'B', @task_by, getdate(), '0')
						END

					END -- IF @process = 'OT'	

					IF @process = 'AW' and @item_aw <> '' BEGIN

						EXEC dbo.ATT_PRO_CALALLOWANCE @company_code, @worker_code, @task_fromdate, @task_todate, @task_by

						DECLARE @allowance_amount decimal (10, 2) = 0
						DECLARE @allowance_quantity decimal (5, 2) = 0

						SELECT @allowance_amount = ISNULL(SUM(ISNULL(ALLOWANCE_AMOUNT, 0)), 0)
						FROM ATT_TR_WAGEDAY
						WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code 
						AND (WAGEDAY_DATE BETWEEN @task_fromdate AND @task_todate) 

						SELECT @allowance_quantity = ISNULL(COUNT(ISNULL(ALLOWANCE_AMOUNT, 0)), 0)
						FROM ATT_TR_WAGEDAY
						WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code 
						AND (WAGEDAY_DATE BETWEEN @task_fromdate AND @task_todate) 
						AND ALLOWANCE_AMOUNT > 0

						SELECT @allowance_amount=Result FROM dbo.ATT_FNT_ROUND_AMOUNT(@company_code, @allowance_amount, 'WAGE_SUMMARY')

						DELETE FROM PAY_TR_PAYITEM 
						WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code AND PAYITEM_DATE = @task_paydate AND ITEM_CODE = @item_aw

						IF @allowance_amount > 0 BEGIN
							INSERT INTO PAY_TR_PAYITEM (COMPANY_CODE, WORKER_CODE, ITEM_CODE, PAYITEM_DATE, PAYITEM_AMOUNT, PAYITEM_QUANTITY, PAYITEM_PAYTYPE, CREATED_BY, CREATED_DATE, FLAG)
							VALUES (@company_code, @worker_code, @item_aw, @task_paydate, @allowance_amount, @allowance_quantity, 'B', @task_by, getdate(), '0')
						END	

					END -- IF @process = 'AW'

					IF @process = 'LT' and @item_aw <> '' BEGIN
						EXEC dbo.ATT_PRO_CALLATE @company_code, @worker_code, @task_fromdate, @task_todate, @task_paydate, @task_by

						DECLARE @late_amount decimal (10, 2) = 0
						DECLARE @late_quantity decimal (5, 2) = 0

						SELECT @late_amount = ISNULL(SUM(ISNULL(LATE_AMOUNT, 0)), 0), @late_quantity = ISNULL(SUM(ISNULL(LATE_MIN, 0)), 0)
						FROM ATT_TR_WAGEDAY
						WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code 
						AND (WAGEDAY_DATE BETWEEN @task_fromdate AND @task_todate) 

						SET @late_quantity = @late_quantity / 60

						SELECT @late_amount=Result FROM dbo.ATT_FNT_ROUND_AMOUNT(@company_code, @late_amount, 'LATE')

						DELETE FROM PAY_TR_PAYITEM 
						WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code AND PAYITEM_DATE = @task_paydate AND ITEM_CODE = @item_lt

						IF @late_amount > 0 BEGIN
							INSERT INTO PAY_TR_PAYITEM (COMPANY_CODE, WORKER_CODE, ITEM_CODE, PAYITEM_DATE, PAYITEM_AMOUNT, PAYITEM_QUANTITY, PAYITEM_PAYTYPE, CREATED_BY, CREATED_DATE, FLAG)
							VALUES (@company_code, @worker_code, @item_lt, @task_paydate, @late_amount, @late_quantity, 'B', @task_by, getdate(), '0')
						END
					END -- IF @process = 'LT'

					IF @process = 'LV' and @item_lv <> '' BEGIN
						EXEC dbo.ATT_PRO_CALLEAVE @company_code, @worker_code, @task_fromdate, @task_todate, @task_paydate, @task_by

						DECLARE @leave_amount decimal (10, 2) = 0
						DECLARE @leave_quantity decimal (5, 2) = 0

						SELECT @leave_amount = ISNULL(SUM(ISNULL(LEAVE_AMOUNT, 0)), 0), @leave_quantity = ISNULL(SUM(ISNULL(LEAVE_MIN, 0)), 0)
						FROM ATT_TR_WAGEDAY
						WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code 
						AND (WAGEDAY_DATE BETWEEN @task_fromdate AND @task_todate) 

						SET @leave_quantity = @leave_quantity / 60 / @worker_hrs

						SELECT @leave_amount=Result FROM dbo.ATT_FNT_ROUND_AMOUNT(@company_code, @leave_amount, 'LEAVE')

						DELETE FROM PAY_TR_PAYITEM 
						WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code AND PAYITEM_DATE = @task_paydate AND ITEM_CODE = @item_lv

						IF @leave_amount > 0 BEGIN
							INSERT INTO PAY_TR_PAYITEM (COMPANY_CODE, WORKER_CODE, ITEM_CODE, PAYITEM_DATE, PAYITEM_AMOUNT, PAYITEM_QUANTITY, PAYITEM_PAYTYPE, CREATED_BY, CREATED_DATE, FLAG)
							VALUES (@company_code, @worker_code, @item_lv, @task_paydate, @leave_amount, @leave_quantity, 'B', @task_by, getdate(), '0')
						END
					END -- IF @process = 'LV'

					IF @process = 'AB' and @item_ab <> '' BEGIN

						EXEC dbo.ATT_PRO_CALABSENT @company_code, @worker_code, @task_fromdate, @task_todate, @task_by

						DECLARE @absent_amount decimal (10, 2) = 0
						DECLARE @absent_quantity decimal (5, 2) = 0

						SELECT @absent_amount = ISNULL(SUM(ISNULL(ABSENT_AMOUNT, 0)), 0)
						FROM ATT_TR_WAGEDAY
						WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code 
						AND (WAGEDAY_DATE BETWEEN @task_fromdate AND @task_todate) 

						SELECT @absent_quantity = ISNULL(COUNT(ISNULL(ABSENT_AMOUNT, 0)), 0)
						FROM ATT_TR_WAGEDAY
						WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code 
						AND (WAGEDAY_DATE BETWEEN @task_fromdate AND @task_todate) 
						AND ABSENT_AMOUNT > 0

						SELECT @absent_amount=Result FROM dbo.ATT_FNT_ROUND_AMOUNT(@company_code, @absent_amount, 'ABSENT')

						DELETE FROM PAY_TR_PAYITEM 
						WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code AND PAYITEM_DATE = @task_paydate AND ITEM_CODE = @item_ab

						IF @absent_amount > 0 BEGIN
							INSERT INTO PAY_TR_PAYITEM (COMPANY_CODE, WORKER_CODE, ITEM_CODE, PAYITEM_DATE, PAYITEM_AMOUNT, PAYITEM_QUANTITY, PAYITEM_PAYTYPE, CREATED_BY, CREATED_DATE, FLAG)
							VALUES (@company_code, @worker_code, @item_ab, @task_paydate, @absent_amount, @absent_quantity, 'B', @task_by, getdate(), '0')
						END

					END -- IF @process = 'AB'

					-- Next worker
					FETCH NEXT FROM cur_whose INTO @worker_code
				END 
			CLOSE cur_whose 
			DEALLOCATE cur_whose



			FETCH NEXT FROM cur_type INTO @process
		END 
		CLOSE cur_type 
		DEALLOCATE cur_type
	END


	-- Update task
	UPDATE SYS_MT_TASK SET TASK_START = @task_start, TASK_END = getdate(), TASK_STATUS = 'F', TASK_NOTE = 'Success '
	WHERE COMPANY_CODE = @company_code AND TASK_ID = @task_id
END

GO


IF EXISTS (SELECT * FROM sysobjects WHERE name = 'PAY_PRO_CALINDE') 
BEGIN 
DROP PROCEDURE PAY_PRO_CALINDE 
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[PAY_PRO_CALINDE]
(
    @CompanyCode varchar (5)
	, @WorkerCode varchar (15)
	, @PeriodPay datetime		
	, @TaskBy varchar(30)
)
AS
BEGIN 

	--DECLARE @CompanyCode varchar (5) = 'OPR'
	--DECLARE @WorkerCode varchar (30) = 'EMP01'
	--DECLARE @PeriodPay datetime = '01/28/2023'
	--DECLARE @TaskBy varchar (30) = 'Test'

	DECLARE @startwork datetime
	DECLARE @emptype_code char (4) = 'M'

	SELECT @emptype_code=WORKER_TYPE, @startwork=WORKER_HIREDATE
	FROM EMP_MT_WORKER
	WHERE COMPANY_CODE=@CompanyCode
	AND WORKER_CODE=@WorkerCode

	-- Cal salary
	IF @emptype_code = 'M' BEGIN
		EXEC dbo.PAY_PRO_CALSALARY @CompanyCode, @WorkerCode, @PeriodPay, @TaskBy
	END
	--

	DECLARE @item_code varchar (30) = ''
	DECLARE @benefit_amount decimal (10, 2)
	DECLARE @benefit_type char(1)

	DECLARE cur_benefit CURSOR FOR 
	SELECT EMP_TR_BENEFIT.ITEM_CODE, EMPBENEFIT_AMOUNT, ISNULL(EMPBENEFIT_PAYTYPE, 'A')
	FROM EMP_TR_BENEFIT	
	WHERE EMP_TR_BENEFIT.COMPANY_CODE=@CompanyCode AND EMP_TR_BENEFIT.WORKER_CODE=@WorkerCode
	AND EMP_TR_BENEFIT.EMPBENEFIT_STARTDATE < @PeriodPay AND (EMPBENEFIT_ENDDATE >= @PeriodPay OR EMPBENEFIT_ENDDATE IS NULL)
	AND (EMPBENEFIT_BREAK IS NULL OR EMPBENEFIT_BREAK = '0')

	OPEN cur_benefit 
		FETCH NEXT FROM cur_benefit INTO @item_code, @benefit_amount, @benefit_type
		WHILE @@FETCH_STATUS = 0 
		BEGIN 

			DECLARE @pf_com_rate decimal (5, 2) = 0
			DECLARE @pf_emp_rate decimal (5, 2) = 0
			DECLARE @pf_com_amount decimal (10, 2) = 0
			DECLARE @pf_emp_amount decimal (10, 2) = 0

			IF @benefit_type = 'A' BEGIN				
				PRINT 'Benefit amount:' + CAST(@benefit_amount AS varchar(30))
			END
			ELSE BEGIN
				
				
				DECLARE @period_from datetime
				DECLARE @period_to datetime
				DECLARE @period_pay datetime
				DECLARE @period_id char (2)
				DECLARE @period_year char (4)
				

				SELECT @period_from=PERIOD_FROM, @period_to=PERIOD_TO, @period_pay=PERIOD_PAYMENT, @period_id=PERIOD_ID, @period_year=YEAR_CODE
				FROM PAY_MT_PERIOD
				WHERE COMPANY_CODE=@CompanyCode
				AND EMPTYPE_CODE=@emptype_code
				AND PERIOD_TYPE='PAY'
				AND PERIOD_PAYMENT=@PeriodPay

				DECLARE @day_period int = 0
				DECLARE @day_working int = 0

				SET @day_period = DATEDIFF(day, @period_from, @period_to) 

				IF @startwork < @period_from BEGIN
					SET @startwork = @period_from
				END

				SET @day_working = DATEDIFF(day, @startwork, @period_to) 

				PRINT 'Period day:' + CAST(@day_period AS varchar(30))
				PRINT 'Working day:' + CAST(@day_working AS varchar(30))

				IF @day_working <> @day_period BEGIN
					SET @benefit_amount = (@benefit_amount / @day_period) * @day_working
				END

				PRINT 'Benefit amount:' + CAST(@benefit_amount AS varchar(30))

			END

			DELETE FROM PAY_TR_PAYITEM
			WHERE COMPANY_CODE = @CompanyCode AND WORKER_CODE = @WorkerCode AND ITEM_CODE = @item_code AND PAYITEM_DATE = @PeriodPay

			IF @benefit_amount > 0 BEGIN
				INSERT INTO PAY_TR_PAYITEM(COMPANY_CODE, WORKER_CODE, ITEM_CODE, PAYITEM_DATE, PAYITEM_AMOUNT, PAYITEM_QUANTITY, PAYITEM_PAYTYPE, CREATED_BY, CREATED_DATE, FLAG)
				VALUES(@CompanyCode, @WorkerCode, @item_code, @PeriodPay, @benefit_amount, 1, 'B', @TaskBy, getdate(), 0)
			END
			
			FETCH NEXT FROM cur_benefit INTO @item_code, @benefit_amount, @benefit_type
			
		END 
	CLOSE cur_benefit 
	DEALLOCATE cur_benefit	



END
GO


IF EXISTS (SELECT * FROM sysobjects WHERE name = 'PAY_PRO_CALPF') 
BEGIN 
DROP PROCEDURE PAY_PRO_CALPF 
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[PAY_PRO_CALPF]
(
    @CompanyCode varchar (5)
	, @WorkerCode varchar (15)
	, @PeriodPay datetime	
	, @CalAmount decimal(12, 2)	
	, @TaskBy varchar(30)
)
AS
BEGIN 


	DECLARE @cal_amount decimal (10, 2) = @CalAmount
	DECLARE @provident_code varchar (30) = ''
	DECLARE @provident_start datetime
	DECLARE @provident_end datetime

	DECLARE cur_plan CURSOR FOR 
	SELECT EMP_TR_PROVIDENT.PROVIDENT_CODE, EMPPROVIDENT_START, EMPPROVIDENT_END
	FROM EMP_TR_PROVIDENT	
	WHERE EMP_TR_PROVIDENT.COMPANY_CODE=@CompanyCode AND EMP_TR_PROVIDENT.WORKER_CODE=@WorkerCode
	AND EMP_TR_PROVIDENT.EMPPROVIDENT_START < @PeriodPay AND (EMPPROVIDENT_END >= @PeriodPay OR EMPPROVIDENT_END IS NULL)

	OPEN cur_plan 
		FETCH NEXT FROM cur_plan INTO @provident_code, @provident_start, @provident_end
		WHILE @@FETCH_STATUS = 0 
		BEGIN 

			DECLARE @pf_com_rate decimal (5, 2) = 0
			DECLARE @pf_emp_rate decimal (5, 2) = 0
			DECLARE @pf_com_amount decimal (10, 2) = 0
			DECLARE @pf_emp_amount decimal (10, 2) = 0


			-- Get workage
			DECLARE @emp_workage decimal (6, 3) = 0
			SELECT @emp_workage = dbo.EMP_FNT_GETWORKAGE(@CompanyCode, @WorkerCode, @PeriodPay)

			--PRINT 'Workage:' + CAST(@emp_workage AS varchar(30))

			-- Get rate pf
			SELECT @pf_emp_rate = RATE_EMP, @pf_com_rate = RATE_COM
			FROM PAY_TR_PROVIDENT_WORKAGE
			WHERE COMPANY_CODE = @CompanyCode AND PROVIDENT_CODE = @provident_code
			AND (@emp_workage BETWEEN WORKAGE_FROM AND WORKAGE_TO)

			IF @pf_emp_rate > 0 AND @pf_com_rate > 0 BEGIN

				SET @pf_emp_amount = @cal_amount * @pf_emp_rate / 100
				SET @pf_com_amount = @cal_amount * @pf_com_rate / 100

				--PRINT 'Emp rate:' + CAST(@pf_emp_rate AS varchar(30))
				--PRINT 'Com rate:' + CAST(@pf_com_rate AS varchar(30))
				--PRINT 'Emp amount:' + CAST(@pf_emp_amount AS varchar(30))
				--PRINT 'Com amount:' + CAST(@pf_com_amount AS varchar(30))

				DELETE FROM PAY_TR_PAYPF
				WHERE COMPANY_CODE = @CompanyCode AND WORKER_CODE = @WorkerCode AND PROVIDENT_CODE = @provident_code AND PAYPF_DATE = @PeriodPay

				INSERT INTO PAY_TR_PAYPF(COMPANY_CODE, WORKER_CODE, PROVIDENT_CODE, PAYPF_DATE, PAYPF_EMP_RATE, PAYPF_EMP_AMOUNT, PAYPF_COM_RATE, PAYPF_COM_AMOUNT, CREATED_BY, CREATED_DATE, FLAG)
				VALUES(@CompanyCode, @WorkerCode, @provident_code, @PeriodPay, @pf_emp_rate, @pf_emp_amount, @pf_com_rate, @pf_com_amount, @TaskBy, getdate(), 0)
			END

			FETCH NEXT FROM cur_plan INTO @provident_code, @provident_start, @provident_end
			
		END 
	CLOSE cur_plan 
	DEALLOCATE cur_plan	

END

GO


IF EXISTS (SELECT * FROM sysobjects WHERE name = 'PAY_PRO_CALSALARY') 
BEGIN 
DROP PROCEDURE PAY_PRO_CALSALARY 
END 
GO


SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[PAY_PRO_CALSALARY]
(
    @CompanyCode varchar (5)
	, @WorkerCode varchar (15)
	, @PeriodPay datetime		
	, @TaskBy varchar(30)
)
AS
BEGIN 

	DECLARE @period_from datetime
	DECLARE @period_to datetime
	DECLARE @period_pay datetime
	DECLARE @period_id char (2)
	DECLARE @period_year char (4)
	DECLARE @emptype_code char (4)

	SELECT @emptype_code=WORKER_TYPE
	FROM EMP_MT_WORKER
	WHERE COMPANY_CODE=@CompanyCode
	AND WORKER_CODE=@WorkerCode

	SELECT @period_from=PERIOD_FROM, @period_to=PERIOD_TO, @period_pay=PERIOD_PAYMENT, @period_id=PERIOD_ID, @period_year=YEAR_CODE
	FROM PAY_MT_PERIOD
	WHERE COMPANY_CODE=@CompanyCode
	AND EMPTYPE_CODE=@emptype_code
	AND PERIOD_TYPE='PAY'
	AND PERIOD_PAYMENT=@PeriodPay

	
	-- Step 1 Get item code	
	DECLARE @item_sa varchar (20) = ''
	SELECT @item_sa = ISNULL(EMPATTITEM_SA, '')					
	FROM ATT_TR_EMPATTITEM
	WHERE COMPANY_CODE = @CompanyCode AND WORKER_CODE = @WorkerCode

	IF @item_sa <> '' BEGIN

		DECLARE @salary_amount decimal(12, 2) = 0
		DECLARE @salary_quantity decimal(5, 2) = 0

		SELECT @salary_amount = ISNULL(Salary, 0), @salary_quantity = ISNULL(Working, 0) FROM dbo.ATT_FNT_GETSALARY(@CompanyCode, @WorkerCode, @period_from, @period_to, @period_pay)
				
		DELETE FROM PAY_TR_PAYITEM 
		WHERE COMPANY_CODE = @CompanyCode AND WORKER_CODE = @WorkerCode AND PAYITEM_DATE = @period_pay AND ITEM_CODE = @item_sa

		IF @salary_amount > 0 BEGIN
			INSERT INTO PAY_TR_PAYITEM (COMPANY_CODE, WORKER_CODE, ITEM_CODE, PAYITEM_DATE, PAYITEM_AMOUNT, PAYITEM_QUANTITY, PAYITEM_PAYTYPE, CREATED_BY, CREATED_DATE, FLAG)
			VALUES (@CompanyCode, @WorkerCode, @item_sa, @period_pay, @salary_amount, @salary_quantity, 'B', @TaskBy, getdate(), '0')
		END

	END

END
GO


IF EXISTS (SELECT * FROM sysobjects WHERE name = 'PAY_PRO_JOBINDE') 
BEGIN 
DROP PROCEDURE PAY_PRO_JOBINDE 
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[PAY_PRO_JOBINDE]
(
    @CompanyCode varchar (5)
	, @TaskID varchar (15)	
)
AS
BEGIN 

	DECLARE @company_code varchar (5) = @CompanyCode
	DECLARE @task_id varchar (30) = @TaskID

	DECLARE @task_start datetime = getdate()

	--********************************************
	-- STEP 1 get task 
	--********************************************
	DECLARE @task_type varchar (10) = ''
	DECLARE @task_by varchar (20) = ''
	SELECT @task_type = TASK_TYPE, @task_by=ISNULL(MODIFIED_BY, CREATED_BY) FROM SYS_MT_TASK WHERE COMPANY_CODE = @company_code AND TASK_ID = @task_id

	--********************************************
	-- STEP 2 get task detail 
	--********************************************
	DECLARE @task_process varchar (200) = ''
	DECLARE @task_fromdate datetime
	DECLARE @task_todate datetime
	DECLARE @task_paydate datetime

	SELECT @task_process = TASKDETAIL_PROCESS, @task_fromdate = TASKDETAIL_FROMDATE, @task_todate = TASKDETAIL_TODATE, @task_paydate = TASKDETAIL_PAYDATE FROM SYS_TR_TASKDETAIL WHERE TASK_ID = @task_id
	PRINT @task_paydate
	--********************************************
	-- STEP 3 get task whose 
	--********************************************
	DECLARE @worker_code varchar (15)
	DECLARE cur_whose CURSOR FOR 
	SELECT WORKER_CODE
	FROM SYS_TR_TASKWHOSE
	WHERE TASK_ID = @task_id

	DECLARE @count_success int = 0

	OPEN cur_whose 
		FETCH NEXT FROM cur_whose INTO @worker_code
		WHILE @@FETCH_STATUS = 0 
		BEGIN 

			PRINT '===================== ' + @worker_code + ' ====================='

			EXEC dbo.PAY_PRO_CALINDE @company_code, @worker_code, @task_paydate, @task_by
			
			SET @count_success = @count_success + 1

			-- Next worker
			FETCH NEXT FROM cur_whose INTO @worker_code
		END 
	CLOSE cur_whose 
	DEALLOCATE cur_whose

	-- Update task
	UPDATE SYS_MT_TASK SET TASK_START = @task_start, TASK_END = getdate(), TASK_STATUS = 'F', TASK_NOTE = 'Success : ' + CAST(@count_success AS varchar(30))
	WHERE COMPANY_CODE = @company_code AND TASK_ID = @task_id


END

GO


IF EXISTS (SELECT * FROM sysobjects WHERE name = 'PAY_PRO_JOBTAX') 
BEGIN 
DROP PROCEDURE PAY_PRO_JOBTAX 
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[PAY_PRO_JOBTAX]
(
    @CompanyCode varchar (5)
	, @TaskID varchar (15)	
)
AS
BEGIN 

	DECLARE @company_code varchar (5) = @CompanyCode
	DECLARE @task_id varchar (30) = @TaskID

	DECLARE @task_start datetime = getdate()

	--********************************************
	-- STEP 1 get task 
	--********************************************
	DECLARE @task_type varchar (10) = ''
	DECLARE @task_by varchar (20) = ''
	SELECT @task_type = TASK_TYPE, @task_by=ISNULL(MODIFIED_BY, CREATED_BY) FROM SYS_MT_TASK WHERE COMPANY_CODE = @company_code AND TASK_ID = @task_id

	--********************************************
	-- STEP 2 get task detail 
	--********************************************
	DECLARE @task_process varchar (200) = ''
	DECLARE @task_fromdate datetime
	DECLARE @task_todate datetime
	DECLARE @task_paydate datetime

	SELECT @task_process = TASKDETAIL_PROCESS, @task_fromdate = TASKDETAIL_FROMDATE, @task_todate = TASKDETAIL_TODATE, @task_paydate = TASKDETAIL_PAYDATE FROM SYS_TR_TASKDETAIL WHERE TASK_ID = @task_id
	PRINT @task_paydate
	--********************************************
	-- STEP 3 get task whose 
	--********************************************
	DECLARE @worker_code varchar (15)
	DECLARE cur_whose CURSOR FOR 
	SELECT WORKER_CODE
	FROM SYS_TR_TASKWHOSE
	WHERE TASK_ID = @task_id

	DECLARE @count_success int = 0

	OPEN cur_whose 
		FETCH NEXT FROM cur_whose INTO @worker_code
		WHILE @@FETCH_STATUS = 0 
		BEGIN 

			PRINT '===================== ' + @worker_code + ' ====================='

			DECLARE @emptype_code char (4) = 'M'

			SELECT @emptype_code=WORKER_TYPE
			FROM EMP_MT_WORKER
			WHERE COMPANY_CODE=@CompanyCode
			AND WORKER_CODE=@worker_code

		
			DECLARE @tax_method char (200) = '1'
			SELECT @tax_method = ISNULL(WORKER_TAXMETHOD, '1') FROM EMP_MT_WORKER WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code
				
			-- STEP 3.1 clear data old
			DELETE FROM PAY_TR_PAYTRAN WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code AND PAY_TR_PAYTRAN.PAYTRAN_PAYDATE = @task_paydate

			-- STEP 3.2 calculate Benefit
			--EXEC dbo.HRM_PRO_CALBENEFIT @company_code, @worker_code, @task_paydate, @task_by

			--IF @emptype_code = 'M' BEGIN
			--	EXEC dbo.PAY_PRO_CALSALARY @company_code, @worker_code, @task_paydate, @task_by
			--END

			-- STEP 3.3 get allowance
			-- Income
			DECLARE @allow_income_fix_401 decimal (12, 2) = 0
			DECLARE @allow_income_fix_402 decimal (12, 2) = 0
			DECLARE @allow_income_fix_403 decimal (12, 2) = 0
			DECLARE @allow_income_fix_4012 decimal (12, 2) = 0
			DECLARE @allow_income_var_401 decimal (12, 2) = 0
			DECLARE @allow_income_var_402 decimal (12, 2) = 0
			DECLARE @allow_income_var_403 decimal (12, 2) = 0
			DECLARE @allow_income_var_4012 decimal (12, 2) = 0
			DECLARE @allow_income_notax decimal (12, 2) = 0

			-- Deduct
			DECLARE @allow_deduct_fix_401 decimal (12, 2) = 0
			DECLARE @allow_deduct_fix_402 decimal (12, 2) = 0
			DECLARE @allow_deduct_fix_403 decimal (12, 2) = 0
			DECLARE @allow_deduct_fix_4012 decimal (12, 2) = 0
			DECLARE @allow_deduct_var_401 decimal (12, 2) = 0
			DECLARE @allow_deduct_var_402 decimal (12, 2) = 0
			DECLARE @allow_deduct_var_403 decimal (12, 2) = 0
			DECLARE @allow_deduct_var_4012 decimal (12, 2) = 0
			DECLARE @allow_deduct_notax decimal (12, 2) = 0

			-- SSO
			DECLARE @allow_income_sso decimal (12, 2) = 0
			DECLARE @allow_deduct_sso decimal (12, 2) = 0

			-- PF
			DECLARE @allow_income_pf decimal (12, 2) = 0
			DECLARE @allow_deduct_pf decimal (12, 2) = 0

			BEGIN 
			SELECT @allow_income_fix_401=ISNULL(SUM(PAYITEM_AMOUNT), 0) 
			FROM PAY_TR_PAYITEM 
			INNER JOIN PAY_MT_ITEM ON PAY_TR_PAYITEM.COMPANY_CODE=PAY_MT_ITEM.COMPANY_CODE AND PAY_TR_PAYITEM.ITEM_CODE=PAY_MT_ITEM.ITEM_CODE
			WHERE PAY_TR_PAYITEM.COMPANY_CODE=@company_code AND PAY_TR_PAYITEM.WORKER_CODE=@worker_code AND PAY_TR_PAYITEM.PAYITEM_DATE=@task_paydate
			AND PAY_MT_ITEM.ITEM_TYPE = 'IN' AND PAY_MT_ITEM.ITEM_REGULAR='1' AND PAY_MT_ITEM.ITEM_CALTAX = 'Y' AND ITEM_SECTION = '1'
			--
			SELECT @allow_income_var_401=ISNULL(SUM(PAYITEM_AMOUNT), 0) 
			FROM PAY_TR_PAYITEM 
			INNER JOIN PAY_MT_ITEM ON PAY_TR_PAYITEM.COMPANY_CODE=PAY_MT_ITEM.COMPANY_CODE AND PAY_TR_PAYITEM.ITEM_CODE=PAY_MT_ITEM.ITEM_CODE
			WHERE PAY_TR_PAYITEM.COMPANY_CODE=@company_code AND PAY_TR_PAYITEM.WORKER_CODE=@worker_code  AND PAY_TR_PAYITEM.PAYITEM_DATE=@task_paydate
			AND PAY_MT_ITEM.ITEM_TYPE = 'IN' AND PAY_MT_ITEM.ITEM_REGULAR='2' AND PAY_MT_ITEM.ITEM_CALTAX = 'Y' AND ITEM_SECTION = '1'
			--
			SELECT @allow_deduct_fix_401=ISNULL(SUM(PAYITEM_AMOUNT), 0) 
			FROM PAY_TR_PAYITEM 
			INNER JOIN PAY_MT_ITEM ON PAY_TR_PAYITEM.COMPANY_CODE=PAY_MT_ITEM.COMPANY_CODE AND PAY_TR_PAYITEM.ITEM_CODE=PAY_MT_ITEM.ITEM_CODE
			WHERE PAY_TR_PAYITEM.COMPANY_CODE=@company_code AND PAY_TR_PAYITEM.WORKER_CODE=@worker_code  AND PAY_TR_PAYITEM.PAYITEM_DATE=@task_paydate
			AND PAY_MT_ITEM.ITEM_TYPE = 'DE' AND PAY_MT_ITEM.ITEM_REGULAR='1' AND PAY_MT_ITEM.ITEM_CALTAX = 'Y' AND ITEM_SECTION = '1'
			--
			SELECT @allow_deduct_var_401=ISNULL(SUM(PAYITEM_AMOUNT), 0) 
			FROM PAY_TR_PAYITEM 
			INNER JOIN PAY_MT_ITEM ON PAY_TR_PAYITEM.COMPANY_CODE=PAY_MT_ITEM.COMPANY_CODE AND PAY_TR_PAYITEM.ITEM_CODE=PAY_MT_ITEM.ITEM_CODE
			WHERE PAY_TR_PAYITEM.COMPANY_CODE=@company_code AND PAY_TR_PAYITEM.WORKER_CODE=@worker_code  AND PAY_TR_PAYITEM.PAYITEM_DATE=@task_paydate
			AND PAY_MT_ITEM.ITEM_TYPE = 'DE' AND PAY_MT_ITEM.ITEM_REGULAR='2' AND PAY_MT_ITEM.ITEM_CALTAX = 'Y' AND ITEM_SECTION = '1'

			-- 40 (2)    	 	 
			SELECT @allow_income_fix_402=ISNULL(SUM(PAYITEM_AMOUNT), 0) 
			FROM PAY_TR_PAYITEM 
			INNER JOIN PAY_MT_ITEM ON PAY_TR_PAYITEM.COMPANY_CODE=PAY_MT_ITEM.COMPANY_CODE AND PAY_TR_PAYITEM.ITEM_CODE=PAY_MT_ITEM.ITEM_CODE
			WHERE PAY_TR_PAYITEM.COMPANY_CODE=@company_code AND PAY_TR_PAYITEM.WORKER_CODE=@worker_code  AND PAY_TR_PAYITEM.PAYITEM_DATE=@task_paydate
			AND PAY_MT_ITEM.ITEM_TYPE = 'IN' AND PAY_MT_ITEM.ITEM_REGULAR='1' AND PAY_MT_ITEM.ITEM_CALTAX = 'Y' AND ITEM_SECTION = '2'
			--
			SELECT @allow_income_var_402=ISNULL(SUM(PAYITEM_AMOUNT), 0) 
			FROM PAY_TR_PAYITEM 
			INNER JOIN PAY_MT_ITEM ON PAY_TR_PAYITEM.COMPANY_CODE=PAY_MT_ITEM.COMPANY_CODE AND PAY_TR_PAYITEM.ITEM_CODE=PAY_MT_ITEM.ITEM_CODE
			WHERE PAY_TR_PAYITEM.COMPANY_CODE=@company_code AND PAY_TR_PAYITEM.WORKER_CODE=@worker_code  AND PAY_TR_PAYITEM.PAYITEM_DATE=@task_paydate
			AND PAY_MT_ITEM.ITEM_TYPE = 'IN' AND PAY_MT_ITEM.ITEM_REGULAR='2' AND PAY_MT_ITEM.ITEM_CALTAX = 'Y' AND ITEM_SECTION = '2'
			--
			SELECT @allow_deduct_fix_402=ISNULL(SUM(PAYITEM_AMOUNT), 0) 
			FROM PAY_TR_PAYITEM 
			INNER JOIN PAY_MT_ITEM ON PAY_TR_PAYITEM.COMPANY_CODE=PAY_MT_ITEM.COMPANY_CODE AND PAY_TR_PAYITEM.ITEM_CODE=PAY_MT_ITEM.ITEM_CODE
			WHERE PAY_TR_PAYITEM.COMPANY_CODE=@company_code AND PAY_TR_PAYITEM.WORKER_CODE=@worker_code  AND PAY_TR_PAYITEM.PAYITEM_DATE=@task_paydate
			AND PAY_MT_ITEM.ITEM_TYPE = 'DE' AND PAY_MT_ITEM.ITEM_REGULAR='1' AND PAY_MT_ITEM.ITEM_CALTAX = 'Y' AND ITEM_SECTION = '2'
			--
			SELECT @allow_deduct_var_402=ISNULL(SUM(PAYITEM_AMOUNT), 0) 
			FROM PAY_TR_PAYITEM 
			INNER JOIN PAY_MT_ITEM ON PAY_TR_PAYITEM.COMPANY_CODE=PAY_MT_ITEM.COMPANY_CODE AND PAY_TR_PAYITEM.ITEM_CODE=PAY_MT_ITEM.ITEM_CODE
			WHERE PAY_TR_PAYITEM.COMPANY_CODE=@company_code AND PAY_TR_PAYITEM.WORKER_CODE=@worker_code  AND PAY_TR_PAYITEM.PAYITEM_DATE=@task_paydate
			AND PAY_MT_ITEM.ITEM_TYPE = 'DE' AND PAY_MT_ITEM.ITEM_REGULAR='2' AND PAY_MT_ITEM.ITEM_CALTAX = 'Y' AND ITEM_SECTION = '2'

			-- 40 (3)    	 	 
			SELECT @allow_income_fix_403=ISNULL(SUM(PAYITEM_AMOUNT), 0) 
			FROM PAY_TR_PAYITEM 
			INNER JOIN PAY_MT_ITEM ON PAY_TR_PAYITEM.COMPANY_CODE=PAY_MT_ITEM.COMPANY_CODE AND PAY_TR_PAYITEM.ITEM_CODE=PAY_MT_ITEM.ITEM_CODE
			WHERE PAY_TR_PAYITEM.COMPANY_CODE=@company_code AND PAY_TR_PAYITEM.WORKER_CODE=@worker_code  AND PAY_TR_PAYITEM.PAYITEM_DATE=@task_paydate
			AND PAY_MT_ITEM.ITEM_TYPE = 'IN' AND PAY_MT_ITEM.ITEM_REGULAR='1' AND PAY_MT_ITEM.ITEM_CALTAX = 'Y' AND ITEM_SECTION = '3'
			--
			SELECT @allow_income_var_403=ISNULL(SUM(PAYITEM_AMOUNT), 0) 
			FROM PAY_TR_PAYITEM 
			INNER JOIN PAY_MT_ITEM ON PAY_TR_PAYITEM.COMPANY_CODE=PAY_MT_ITEM.COMPANY_CODE AND PAY_TR_PAYITEM.ITEM_CODE=PAY_MT_ITEM.ITEM_CODE
			WHERE PAY_TR_PAYITEM.COMPANY_CODE=@company_code AND PAY_TR_PAYITEM.WORKER_CODE=@worker_code  AND PAY_TR_PAYITEM.PAYITEM_DATE=@task_paydate
			AND PAY_MT_ITEM.ITEM_TYPE = 'IN' AND PAY_MT_ITEM.ITEM_REGULAR='2' AND PAY_MT_ITEM.ITEM_CALTAX = 'Y' AND ITEM_SECTION = '3'
			--
			SELECT @allow_deduct_fix_403=ISNULL(SUM(PAYITEM_AMOUNT), 0) 
			FROM PAY_TR_PAYITEM 
			INNER JOIN PAY_MT_ITEM ON PAY_TR_PAYITEM.COMPANY_CODE=PAY_MT_ITEM.COMPANY_CODE AND PAY_TR_PAYITEM.ITEM_CODE=PAY_MT_ITEM.ITEM_CODE
			WHERE PAY_TR_PAYITEM.COMPANY_CODE=@company_code AND PAY_TR_PAYITEM.WORKER_CODE=@worker_code  AND PAY_TR_PAYITEM.PAYITEM_DATE=@task_paydate
			AND PAY_MT_ITEM.ITEM_TYPE = 'DE' AND PAY_MT_ITEM.ITEM_REGULAR='1' AND PAY_MT_ITEM.ITEM_CALTAX = 'Y' AND ITEM_SECTION = '3'
			--
			SELECT @allow_deduct_var_403=ISNULL(SUM(PAYITEM_AMOUNT), 0) 
			FROM PAY_TR_PAYITEM 
			INNER JOIN PAY_MT_ITEM ON PAY_TR_PAYITEM.COMPANY_CODE=PAY_MT_ITEM.COMPANY_CODE AND PAY_TR_PAYITEM.ITEM_CODE=PAY_MT_ITEM.ITEM_CODE
			WHERE PAY_TR_PAYITEM.COMPANY_CODE=@company_code AND PAY_TR_PAYITEM.WORKER_CODE=@worker_code  AND PAY_TR_PAYITEM.PAYITEM_DATE=@task_paydate
			AND PAY_MT_ITEM.ITEM_TYPE = 'DE' AND PAY_MT_ITEM.ITEM_REGULAR='2' AND PAY_MT_ITEM.ITEM_CALTAX = 'Y' AND ITEM_SECTION = '3'

			-- 40 (1)(2)    	 	 
			SELECT @allow_income_fix_4012=ISNULL(SUM(PAYITEM_AMOUNT), 0) 
			FROM PAY_TR_PAYITEM 
			INNER JOIN PAY_MT_ITEM ON PAY_TR_PAYITEM.COMPANY_CODE=PAY_MT_ITEM.COMPANY_CODE AND PAY_TR_PAYITEM.ITEM_CODE=PAY_MT_ITEM.ITEM_CODE
			WHERE PAY_TR_PAYITEM.COMPANY_CODE=@company_code AND PAY_TR_PAYITEM.WORKER_CODE=@worker_code  AND PAY_TR_PAYITEM.PAYITEM_DATE=@task_paydate
			AND PAY_MT_ITEM.ITEM_TYPE = 'IN' AND PAY_MT_ITEM.ITEM_REGULAR='1' AND PAY_MT_ITEM.ITEM_CALTAX = 'Y' AND ITEM_SECTION = '4'
			--
			SELECT @allow_income_var_4012=ISNULL(SUM(PAYITEM_AMOUNT), 0) 
			FROM PAY_TR_PAYITEM 
			INNER JOIN PAY_MT_ITEM ON PAY_TR_PAYITEM.COMPANY_CODE=PAY_MT_ITEM.COMPANY_CODE AND PAY_TR_PAYITEM.ITEM_CODE=PAY_MT_ITEM.ITEM_CODE
			WHERE PAY_TR_PAYITEM.COMPANY_CODE=@company_code AND PAY_TR_PAYITEM.WORKER_CODE=@worker_code  AND PAY_TR_PAYITEM.PAYITEM_DATE=@task_paydate
			AND PAY_MT_ITEM.ITEM_TYPE = 'IN' AND PAY_MT_ITEM.ITEM_REGULAR='2' AND PAY_MT_ITEM.ITEM_CALTAX = 'Y' AND ITEM_SECTION = '4'
			--
			SELECT @allow_deduct_fix_4012=ISNULL(SUM(PAYITEM_AMOUNT), 0) 
			FROM PAY_TR_PAYITEM 
			INNER JOIN PAY_MT_ITEM ON PAY_TR_PAYITEM.COMPANY_CODE=PAY_MT_ITEM.COMPANY_CODE AND PAY_TR_PAYITEM.ITEM_CODE=PAY_MT_ITEM.ITEM_CODE
			WHERE PAY_TR_PAYITEM.COMPANY_CODE=@company_code AND PAY_TR_PAYITEM.WORKER_CODE=@worker_code  AND PAY_TR_PAYITEM.PAYITEM_DATE=@task_paydate
			AND PAY_MT_ITEM.ITEM_TYPE = 'DE' AND PAY_MT_ITEM.ITEM_REGULAR='1' AND PAY_MT_ITEM.ITEM_CALTAX = 'Y' AND ITEM_SECTION = '4'
			--
			SELECT @allow_deduct_var_4012=ISNULL(SUM(PAYITEM_AMOUNT), 0) 
			FROM PAY_TR_PAYITEM 
			INNER JOIN PAY_MT_ITEM ON PAY_TR_PAYITEM.COMPANY_CODE=PAY_MT_ITEM.COMPANY_CODE AND PAY_TR_PAYITEM.ITEM_CODE=PAY_MT_ITEM.ITEM_CODE
			WHERE PAY_TR_PAYITEM.COMPANY_CODE=@company_code AND PAY_TR_PAYITEM.WORKER_CODE=@worker_code  AND PAY_TR_PAYITEM.PAYITEM_DATE=@task_paydate
			AND PAY_MT_ITEM.ITEM_TYPE = 'DE' AND PAY_MT_ITEM.ITEM_REGULAR='2' AND PAY_MT_ITEM.ITEM_CALTAX = 'Y' AND ITEM_SECTION = '4'

			-- No tax
			SELECT @allow_income_notax=ISNULL(SUM(PAYITEM_AMOUNT), 0) 
			FROM PAY_TR_PAYITEM 
			INNER JOIN PAY_MT_ITEM ON PAY_TR_PAYITEM.COMPANY_CODE=PAY_MT_ITEM.COMPANY_CODE AND PAY_TR_PAYITEM.ITEM_CODE=PAY_MT_ITEM.ITEM_CODE
			WHERE PAY_TR_PAYITEM.COMPANY_CODE=@company_code AND PAY_TR_PAYITEM.WORKER_CODE=@worker_code  AND PAY_TR_PAYITEM.PAYITEM_DATE=@task_paydate
			AND PAY_MT_ITEM.ITEM_TYPE = 'IN' AND PAY_MT_ITEM.ITEM_CALTAX = 'N'
			--
			SELECT @allow_deduct_notax=ISNULL(SUM(PAYITEM_AMOUNT), 0) 
			FROM PAY_TR_PAYITEM 
			INNER JOIN PAY_MT_ITEM ON PAY_TR_PAYITEM.COMPANY_CODE=PAY_MT_ITEM.COMPANY_CODE AND PAY_TR_PAYITEM.ITEM_CODE=PAY_MT_ITEM.ITEM_CODE
			WHERE PAY_TR_PAYITEM.COMPANY_CODE=@company_code AND PAY_TR_PAYITEM.WORKER_CODE=@worker_code  AND PAY_TR_PAYITEM.PAYITEM_DATE=@task_paydate
			AND PAY_MT_ITEM.ITEM_TYPE = 'DE' AND PAY_MT_ITEM.ITEM_CALTAX = 'N'

			-- SSO
			SELECT @allow_income_sso=ISNULL(SUM(PAYITEM_AMOUNT), 0) 
			FROM PAY_TR_PAYITEM 
			INNER JOIN PAY_MT_ITEM ON PAY_TR_PAYITEM.COMPANY_CODE=PAY_MT_ITEM.COMPANY_CODE AND PAY_TR_PAYITEM.ITEM_CODE=PAY_MT_ITEM.ITEM_CODE
			WHERE PAY_TR_PAYITEM.COMPANY_CODE=@company_code AND PAY_TR_PAYITEM.WORKER_CODE=@worker_code  AND PAY_TR_PAYITEM.PAYITEM_DATE=@task_paydate
			AND PAY_MT_ITEM.ITEM_TYPE = 'IN' AND PAY_MT_ITEM.ITEM_CALSSO = 'Y'
			--
			SELECT @allow_deduct_sso=ISNULL(SUM(PAYITEM_AMOUNT), 0) 
			FROM PAY_TR_PAYITEM 
			INNER JOIN PAY_MT_ITEM ON PAY_TR_PAYITEM.COMPANY_CODE=PAY_MT_ITEM.COMPANY_CODE AND PAY_TR_PAYITEM.ITEM_CODE=PAY_MT_ITEM.ITEM_CODE
			WHERE PAY_TR_PAYITEM.COMPANY_CODE=@company_code AND PAY_TR_PAYITEM.WORKER_CODE=@worker_code  AND PAY_TR_PAYITEM.PAYITEM_DATE=@task_paydate
			AND PAY_MT_ITEM.ITEM_TYPE = 'DE' AND PAY_MT_ITEM.ITEM_CALSSO = 'Y'

			-- PF
			SELECT @allow_income_pf=ISNULL(SUM(PAYITEM_AMOUNT), 0) 
			FROM PAY_TR_PAYITEM 
			INNER JOIN PAY_MT_ITEM ON PAY_TR_PAYITEM.COMPANY_CODE=PAY_MT_ITEM.COMPANY_CODE AND PAY_TR_PAYITEM.ITEM_CODE=PAY_MT_ITEM.ITEM_CODE
			WHERE PAY_TR_PAYITEM.COMPANY_CODE=@company_code AND PAY_TR_PAYITEM.WORKER_CODE=@worker_code  AND PAY_TR_PAYITEM.PAYITEM_DATE=@task_paydate
			AND PAY_MT_ITEM.ITEM_TYPE = 'IN' AND PAY_MT_ITEM.ITEM_CALPF = 'Y'
			--
			SELECT @allow_deduct_pf=ISNULL(SUM(PAYITEM_AMOUNT), 0) 
			FROM PAY_TR_PAYITEM 
			INNER JOIN PAY_MT_ITEM ON PAY_TR_PAYITEM.COMPANY_CODE=PAY_MT_ITEM.COMPANY_CODE AND PAY_TR_PAYITEM.ITEM_CODE=PAY_MT_ITEM.ITEM_CODE
			WHERE PAY_TR_PAYITEM.COMPANY_CODE=@company_code AND PAY_TR_PAYITEM.WORKER_CODE=@worker_code  AND PAY_TR_PAYITEM.PAYITEM_DATE=@task_paydate
			AND PAY_MT_ITEM.ITEM_TYPE = 'DE' AND PAY_MT_ITEM.ITEM_CALPF = 'Y'
		
			END

			PRINT '############ Allowance ############'
			PRINT 'Income fix 40(1):' + CAST(@allow_income_fix_401 AS varchar(30))
			PRINT 'Deduct fix 40(1):' + CAST(@allow_deduct_fix_401 AS varchar(30))
			PRINT 'Income var 40(1):' + CAST(@allow_income_var_401 AS varchar(30))
			PRINT 'Deduct var 40(1):' + CAST(@allow_deduct_var_401 AS varchar(30))
			PRINT '--'
			PRINT 'Income fix 40(2):' + CAST(@allow_income_fix_402 AS varchar(30))
			PRINT 'Deduct fix 40(2):' + CAST(@allow_deduct_fix_402 AS varchar(30))
			PRINT 'Income var 40(2):' + CAST(@allow_income_var_402 AS varchar(30))
			PRINT 'Deduct var 40(2):' + CAST(@allow_deduct_var_402 AS varchar(30))
			PRINT '--'
			PRINT 'Income fix 40(3):' + CAST(@allow_income_fix_403 AS varchar(30))
			PRINT 'Deduct fix 40(3):' + CAST(@allow_deduct_fix_403 AS varchar(30))
			PRINT 'Income var 40(3):' + CAST(@allow_income_var_403 AS varchar(30))
			PRINT 'Deduct var 40(3):' + CAST(@allow_deduct_var_403 AS varchar(30))
			PRINT '--'
			PRINT 'Income fix 40(1)(2):' + CAST(@allow_income_fix_4012 AS varchar(30))
			PRINT 'Deduct fix 40(1)(2):' + CAST(@allow_deduct_fix_4012 AS varchar(30))
			PRINT 'Income var 40(1)(2):' + CAST(@allow_income_var_4012 AS varchar(30))
			PRINT 'Deduct var 40(1)(2):' + CAST(@allow_deduct_var_4012 AS varchar(30))
			PRINT '--'
			PRINT 'Income no tax:' + CAST(@allow_income_notax AS varchar(30))
			PRINT 'Deduct no tax:' + CAST(@allow_deduct_notax AS varchar(30))
			PRINT '--'
			PRINT 'Income SSO:' + CAST(@allow_income_sso AS varchar(30))
			PRINT 'Deduct SSO:' + CAST(@allow_deduct_sso AS varchar(30))
			PRINT '--'
			PRINT 'Income PF:' + CAST(@allow_income_pf AS varchar(30))
			PRINT 'Deduct PF:' + CAST(@allow_deduct_pf AS varchar(30))
			PRINT '--'		
			-- STEP 3.4 calculate SSO
			SET @allow_income_sso = @allow_income_sso - @allow_deduct_sso
			IF @allow_income_sso < 0 BEGIN
				SET @allow_income_sso = 0
			END
			DECLARE @sso_emp_rate decimal (5, 2) = 0
			DECLARE @sso_emp_amount decimal (8, 2) = 0
			DECLARE @sso_com_rate decimal (5, 2) = 0
			DECLARE @sso_com_amount decimal (8, 2) = 0
			SELECT @sso_emp_rate=ISNULL(SSOEmpRate, 0), @sso_emp_amount=ISNULL(SSOEmpAmount, 0), @sso_com_rate=ISNULL(SSOComRate, 0), @sso_com_amount=ISNULL(SSOComAmount, 0) 
			FROM dbo.PAY_FNT_GETSSO(@company_code, @worker_code, @task_paydate, @allow_income_sso)
				
			PRINT 'SSO Amount:' + CAST(@sso_emp_amount AS varchar(30))

			-- STEP 3.5 calculate PF
			DECLARE @pf_emp_amount decimal (8, 2) = 0
			DECLARE @pf_com_amount decimal (8, 2) = 0
			SET @allow_income_pf = @allow_income_pf - @allow_deduct_pf
			IF @allow_income_pf < 0 BEGIN
				SET @allow_income_pf = 0
			END
			EXEC dbo.PAY_PRO_CALPF @company_code, @worker_code, @task_paydate, @allow_income_pf, @task_by

			SELECT @pf_emp_amount=ISNULL(SUM(PAYPF_EMP_AMOUNT), 0), @pf_com_amount=ISNULL(SUM(PAYPF_COM_AMOUNT), 0) FROM PAY_TR_PAYPF
			WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code AND PAYPF_DATE = @task_paydate

			PRINT 'PF Amount:' + CAST(@pf_emp_amount AS varchar(30))
		
			-- Record to DB
			INSERT INTO PAY_TR_PAYTRAN(COMPANY_CODE, WORKER_CODE, PAYTRAN_PAYDATE
			, PAYTRAN_SSOEMP, PAYTRAN_SSOCOM, PAYTRAN_SSORATEEMP, PAYTRAN_SSORATECOM
			, PAYTRAN_PFEMP, PAYTRAN_PFCOM
			, PAYTRAN_INCOME_TOTAL, PAYTRAN_DEDUCT_TOTAL, PAYTRAN_NETPAY_B, PAYTRAN_NEYPAY_C
			, CREATED_BY, CREATED_DATE, FLAG
			)
			VALUES(@company_code, @worker_code, @task_paydate
			, @sso_emp_amount, @sso_com_amount, @sso_emp_rate, @sso_com_rate
			, @pf_emp_amount, @pf_com_amount
			, 0, 0, 0, 0
			, @task_by, getdate(), 0
			)
		
			-- STEP 3.6 calculate Tax
			-- Cal withhoding tax

			DELETE FROM PAY_TR_PAYTAXWITHHOLDING 
			WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code AND PAYTAXWITHHOLDING_DATE = @task_paydate

			DECLARE @amount_withhoding decimal (10, 2) = 0
			
			SET @amount_withhoding = (@allow_income_fix_403 - @allow_deduct_fix_403) + (@allow_income_var_403 - @allow_deduct_var_403)

			IF @amount_withhoding > 0 BEGIN

				DECLARE @tax_withhoding decimal (10, 2) = 0
				
				SET @tax_withhoding = (@tax_withhoding * 3) / 100

				INSERT INTO PAY_TR_PAYTAXWITHHOLDING(COMPANY_CODE, WORKER_CODE, PAYTAXWITHHOLDING_DATE
				, PAYTAXWITHHOLDING_AMOUNT, PAYTAXWITHHOLDING_TAX	
				, CREATED_BY, CREATED_DATE, FLAG
				)
				VALUES(@company_code, @worker_code, @task_paydate
				, @amount_withhoding, @tax_withhoding
				, @task_by, getdate(), 0
				)
			END


			DECLARE @tax_fix decimal (12, 2) = 0
			DECLARE @tax_var decimal (12, 2) = 0
			DECLARE @tax_401 decimal (12, 2) = 0
			DECLARE @tax_402 decimal (12, 2) = 0
			DECLARE @tax_403 decimal (12, 2) = 0
			DECLARE @tax_4012 decimal (12, 2) = 0

			DECLARE @allow_income_fix decimal (12, 2) = @allow_income_fix_401 + @allow_income_fix_402 + @allow_income_fix_403 + @allow_income_fix_4012
			DECLARE @allow_deduct_fix decimal (12, 2) = @allow_deduct_fix_401 + @allow_deduct_fix_402 + @allow_deduct_fix_403 + @allow_deduct_fix_4012
			DECLARE @allow_income_var decimal (12, 2) = @allow_income_var_401 + @allow_income_var_402 + @allow_income_var_403 + @allow_income_var_4012
			DECLARE @allow_deduct_var decimal (12, 2) = @allow_deduct_var_401 + @allow_deduct_var_402 + @allow_deduct_var_403 + @allow_deduct_var_4012

			PRINT ''
			PRINT '############ Calculate tax ############'

			DECLARE @reduct_sso decimal (12, 2) = 0
			DECLARE @reduct_pf decimal (12, 2) = 0
			DECLARE @reduct_rmf decimal (12, 2) = 0
			DECLARE @reduct_ssf decimal (12, 2) = 0

			IF @tax_method = '1' BEGIN
			
				PRINT 'Tax Method : EMP'
				SELECT @tax_fix=ISNULL(TaxFix, 0), @tax_var=ISNULL(TaxVar, 0) 
				, @reduct_sso=ISNULL(ReduceSSO, 0), @reduct_pf=ISNULL(ReducePF, 0), @reduct_rmf=ISNULL(ReduceRMF, 0), @reduct_ssf=ISNULL(ReduceSSF, 0)

				FROM dbo.PAY_FNT_TAX(@company_code, @worker_code, @task_paydate, @allow_income_fix, @allow_deduct_fix, @allow_income_var, @allow_deduct_var, 0.0, 0.0, 'EN', '1', @task_by)
			
				PRINT ' Tax Fix : ' + CAST( @tax_fix AS varchar(50))
				PRINT ' Tax Var : ' + CAST( @tax_var AS varchar(50))
			END

			DECLARE @intax_fix decimal (12, 2) = 0
			DECLARE @intax_var decimal (12, 2) = 0
			DECLARE @intax_temp decimal (12, 2) = 0
			DECLARE @intax_diff decimal (12, 2) = 0
		
			IF @tax_method = '2' BEGIN
				PRINT 'Tax Method : INTAX(1)'

				-- STEP 1 FIX Round 1			
				SELECT @intax_fix=ISNULL(TaxFix, 0) 
				, @reduct_sso=ISNULL(ReduceSSO, 0), @reduct_pf=ISNULL(ReducePF, 0), @reduct_rmf=ISNULL(ReduceRMF, 0), @reduct_ssf=ISNULL(TaxVar, 0)
				FROM dbo.PAY_FNT_TAX(@company_code, @worker_code, @task_paydate, @allow_income_fix, @allow_deduct_fix, @allow_income_var, @allow_deduct_var, 0.0, 0.0, 'EN', '0', @task_by)
				PRINT ' Round 1 Intax Fix : ' + CAST( @intax_fix AS varchar(50))

				SELECT @tax_fix=ISNULL(TaxFix, 0) FROM dbo.PAY_FNT_TAX(@company_code, @worker_code, @task_paydate, @allow_income_fix, @allow_deduct_fix, @allow_income_var, @allow_deduct_var, @intax_fix, 0.0, 'EN', '1', @task_by)
						
				SELECT @intax_var=ISNULL(TaxFix, 0) FROM dbo.PAY_FNT_TAX(@company_code, @worker_code, @task_paydate, @allow_income_fix, @allow_deduct_fix, @allow_income_var, @allow_deduct_var, (@allow_income_var - @allow_deduct_var), 0.0, 'EN', '0', @task_by)
			
				PRINT ' Round 1 Intax Var : ' + CAST( @intax_var AS varchar(50))
				-- Test
				--SET @allow_income_var = 15000
				--SET @allow_deduct_var = 0

				select @tax_var=ISNULL(TaxVar, 0) FROM dbo.PAY_FNT_TAX(@company_code, @worker_code, @task_paydate, @allow_income_fix, @allow_deduct_fix, @allow_income_var, @allow_deduct_var, @intax_fix, @intax_var, 'EN', '1', @task_by)
						
				PRINT ' Tax Fix : ' + CAST( @tax_fix AS varchar(50))
				PRINT ' Tax Var : ' + CAST( @tax_var AS varchar(50))
			END

			IF @tax_method = '3' BEGIN
				PRINT 'Tax Method : INTAX(All)'

				-- Test
				--SET @allow_income_fix = 60000
				--SET @allow_income_var = 15000		
			
				-- STEP 1 FIX Round 1

				DECLARE @mul_period int = 12
			
				SELECT @intax_fix=ISNULL(TaxFix, 0), @mul_period=MulPeriod 
				, @reduct_sso=ISNULL(ReduceSSO, 0), @reduct_pf=ISNULL(ReducePF, 0), @reduct_rmf=ISNULL(ReduceRMF, 0), @reduct_ssf=ISNULL(ReduceSSF, 0)
				FROM dbo.PAY_FNT_TAX(@company_code, @worker_code, @task_paydate, @allow_income_fix, @allow_deduct_fix, @allow_income_var, @allow_deduct_var, 0.0, 0.0, 'EN', '0', @task_by)
			
				-- FIX
				DECLARE @count int = 1
				PRINT '############# FIX '
				PRINT ' Round ' + CAST( @count AS varchar(10))
				PRINT '		Intax Fix : ' + CAST( @intax_fix AS varchar(50))

				SET @intax_diff = 1
				WHILE @intax_diff > 0 BEGIN

					SET @count = @count + 1

					SELECT @intax_temp=ISNULL(TaxFix, 0) FROM dbo.PAY_FNT_TAX(@company_code, @worker_code, @task_paydate, @allow_income_fix, @allow_deduct_fix, @allow_income_var, @allow_deduct_var, @intax_fix, 0.0, 'EN', '0', @task_by)
				
					SET @intax_diff = @intax_temp - @intax_fix
								
					PRINT ' Round ' + CAST( @count AS varchar(10))
					PRINT '		Intax Fix : ' + CAST( @intax_temp AS varchar(50))
					PRINT '		Diff ' + CAST( @intax_diff AS varchar(10))

					SET @intax_fix = @intax_fix + @intax_diff

				END

				-- VAR
				SET @intax_var = (@allow_income_var - @allow_deduct_var)
				SELECT @intax_var=ISNULL(TaxFix, 0) FROM dbo.PAY_FNT_TAX(@company_code, @worker_code, @task_paydate, @allow_income_fix, @allow_deduct_fix, @allow_income_var, @allow_deduct_var, @intax_var, 0.0, 'EN', '0', @task_by)
			
				SET @count = 1
				PRINT '############# VAR '
				PRINT ' Round ' + CAST( @count AS varchar(10))
				PRINT '		Intax Var : ' + CAST( @intax_var AS varchar(50))

				SET @intax_diff = 1
				WHILE @intax_diff > 0 BEGIN

					SET @count = @count + 1
							
					SELECT @intax_temp=ISNULL(TaxFix, 0) FROM dbo.PAY_FNT_TAX(@company_code, @worker_code, @task_paydate, @allow_income_fix, @allow_deduct_fix, @allow_income_var, @allow_deduct_var, @intax_var + (@allow_income_var - @allow_deduct_var), 0.0, 'EN', '0', @task_by)
				
					SET @intax_diff = @intax_temp - @intax_var
								
					PRINT ' Round ' + CAST( @count AS varchar(10))
					PRINT '		Intax Var : ' + CAST( @intax_temp AS varchar(50))
					PRINT '		Diff ' + CAST( @intax_diff AS varchar(10))

					SET @intax_var = @intax_var + @intax_diff 

					PRINT '		Next ' + CAST( @intax_var AS varchar(10))

				END

				SET @tax_var = @intax_var - @intax_fix
				SET @tax_fix = @intax_fix / @mul_period

				IF @tax_var < 0 BEGIN SET @tax_var = 0 END
				IF @tax_fix < 0 BEGIN SET @tax_fix = 0 END

				PRINT ' Tax Fix : ' + CAST( @tax_fix AS varchar(50))
				PRINT ' Tax Var : ' + CAST( @tax_var AS varchar(50))

			END			
		
			-- STEP 3.7 Seperate section

			BEGIN
			DECLARE @allow_401_fix decimal (12, 2) = @allow_income_fix_401 - @allow_deduct_fix_401
			DECLARE @allow_402_fix decimal (12, 2) = @allow_income_fix_402 - @allow_deduct_fix_402
			DECLARE @allow_403_fix decimal (12, 2) = @allow_income_fix_403 - @allow_deduct_fix_403
			DECLARE @allow_4012_fix decimal (12, 2) = @allow_income_fix_4012 - @allow_deduct_fix_4012

			DECLARE @allow_401_var decimal (12, 2) = @allow_income_var_401 - @allow_deduct_var_401
			DECLARE @allow_402_var decimal (12, 2) = @allow_income_var_402 - @allow_deduct_var_402
			DECLARE @allow_403_var decimal (12, 2) = @allow_income_var_403 - @allow_deduct_var_403
			DECLARE @allow_4012_var decimal (12, 2) = @allow_income_var_4012 - @allow_deduct_var_4012
		
			IF @allow_401_fix < 0 BEGIN SET @allow_401_fix = 0 END
			IF @allow_402_fix < 0 BEGIN SET @allow_402_fix = 0 END
			IF @allow_403_fix < 0 BEGIN SET @allow_403_fix = 0 END
			IF @allow_4012_fix < 0 BEGIN SET @allow_4012_fix = 0 END

			IF @allow_401_var < 0 BEGIN SET @allow_401_var = 0 END
			IF @allow_402_var < 0 BEGIN SET @allow_402_var = 0 END
			IF @allow_403_var < 0 BEGIN SET @allow_403_var = 0 END
			IF @allow_4012_var < 0 BEGIN SET @allow_4012_var = 0 END
		
			DECLARE @allow_fix_total decimal (12, 2) = @allow_401_fix + @allow_402_fix + @allow_403_fix + @allow_4012_fix
			DECLARE @allow_var_total decimal (12, 2) = @allow_401_var + @allow_402_var + @allow_403_var + @allow_4012_var

			IF @allow_fix_total = 0 BEGIN SET @allow_fix_total = 1 END
			IF @allow_var_total = 0 BEGIN SET @allow_var_total = 1 END
				
			SET @tax_401 = @tax_fix * (@allow_401_fix / @allow_fix_total)
			SET @tax_401 = @tax_401 + ( @tax_var * (@allow_401_var / @allow_var_total))

			SET @tax_402 = @tax_fix * (@allow_402_fix / @allow_fix_total)
			SET @tax_402 = @tax_402 + ( @tax_var * (@allow_402_var / @allow_var_total))

			SET @tax_403 = @tax_fix * (@allow_403_fix / @allow_fix_total)
			SET @tax_403 = @tax_403 + ( @tax_var * (@allow_403_var / @allow_var_total))

			SET @tax_4012 = @tax_fix * (@allow_4012_fix / @allow_fix_total)
			SET @tax_4012 = @tax_4012 + ( @tax_var * (@allow_4012_var / @allow_var_total))
			END

			PRINT ''
			PRINT '############ Section ############'
			PRINT ' Tax 40(1) : ' + CAST( @tax_401 AS varchar(50))
			PRINT ' Tax 40(1) 3 : ' + CAST( @tax_403 AS varchar(50))
			PRINT ' Tax 40(2) : ' + CAST( @tax_402 AS varchar(50))
			PRINT ' Tax 40(1)(2) : ' + CAST( @tax_4012 AS varchar(50))

			-- STEP 3.8 Record to DB
			DECLARE @income_total decimal (12, 2) = (@allow_income_fix + @allow_income_var) + @allow_income_notax
			DECLARE @deduct_total decimal (12, 2) = (@allow_deduct_fix + @allow_deduct_var + @pf_emp_amount + @sso_emp_amount + @tax_401 + @tax_402 + @tax_403 + @tax_4012) + @allow_deduct_notax
			DECLARE @netpay decimal (12, 2) = @income_total - @deduct_total
			IF @netpay < 0 BEGIN SET @netpay = 0 END

			UPDATE PAY_TR_PAYTRAN SET
			PAYTRAN_INCOME_401 = @allow_income_fix_401 + @allow_income_var_401		
			, PAYTRAN_INCOME_4013 = @allow_income_fix_403 + @allow_income_var_403		
			, PAYTRAN_INCOME_402I = @allow_income_fix_402 + @allow_income_var_402		
			, PAYTRAN_INCOME_4012 = @allow_income_fix_4012 + @allow_income_var_4012	
		
			, PAYTRAN_DEDUCT_401 = @allow_deduct_fix_401 + @allow_deduct_var_401		
			, PAYTRAN_DEDUCT_4013 = @allow_deduct_fix_403 + @allow_deduct_var_403		
			, PAYTRAN_DEDUCT_402I = @allow_deduct_fix_402 + @allow_deduct_var_402		
			, PAYTRAN_DEDUCT_4012 = @allow_deduct_fix_4012 + @allow_deduct_var_4012
		
			, PAYTRAN_TAX_401 = @tax_401		
			, PAYTRAN_TAX_4013 = @tax_403		
			, PAYTRAN_TAX_402I = @tax_402	
			, PAYTRAN_TAX_4012 = @tax_4012

			, PAYTRAN_INCOME_NOTAX = @allow_income_notax
			, PAYTRAN_DEDUCT_NOTAX = @allow_deduct_notax

			, PAYTRAN_INCOME_TOTAL = @income_total
			, PAYTRAN_DEDUCT_TOTAL = @deduct_total
			, PAYTRAN_NETPAY_B = @netpay
			, PAYTRAN_NEYPAY_C = 0
			WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code AND PAYTRAN_PAYDATE = @task_paydate

			-- Bank
			DECLARE @bank_acc varchar(15) = ''
			DECLARE @bank_code varchar(15) = ''
			SELECT TOP 1 @bank_acc=BANK_ACCOUNT, @bank_code=BANK_CODE FROM EMP_TR_BANK
			WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code 


			DELETE FROM PAY_TR_PAYBANK 
			WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code AND PAYBANK_PAYDATE = @task_paydate

			IF @bank_acc <> '' BEGIN

				INSERT INTO PAY_TR_PAYBANK(COMPANY_CODE, WORKER_CODE, PAYBANK_PAYDATE
				, PAYBANK_BANKACCOUNT, PAYBANK_BANKCODE, PAYBANK_AMOUNT		
				, CREATED_BY, CREATED_DATE, FLAG
				)
				VALUES(@company_code, @worker_code, @task_paydate
				, @bank_acc, @bank_code, @netpay		
				, @task_by, getdate(), 0
				)

			END

			-- Reduce
			DECLARE @table_reduct_emp TABLE(reduce_id varchar(5), reduce_amount decimal(10, 2)) 

			INSERT INTO @table_reduct_emp
			SELECT ReduceID, ReduceAmount FROM dbo.PAY_FNT_GETEMPREDUCE(@company_code, @worker_code, @task_paydate, 0, 'EN')
			
			DELETE FROM PAY_TR_PAYREDUCE 
			WHERE COMPANY_CODE = @company_code AND WORKER_CODE = @worker_code AND PAYREDUCE_PAYDATE = @task_paydate

			INSERT INTO PAY_TR_PAYREDUCE (COMPANY_CODE, WORKER_CODE, PAYREDUCE_PAYDATE, REDUCE_CODE, PAYREDUCE_AMOUNT)
			SELECT @company_code, @worker_code, @task_paydate, reduce_id, reduce_amount
			FROM @table_reduct_emp
			WHERE (NOT reduce_id IN ('RMF', 'SSF', 'PF', 'SSO'))

			INSERT INTO PAY_TR_PAYREDUCE (COMPANY_CODE, WORKER_CODE, PAYREDUCE_PAYDATE, REDUCE_CODE, PAYREDUCE_AMOUNT)
			VALUES(@company_code, @worker_code, @task_paydate, 'SSO', @reduct_sso)

			INSERT INTO PAY_TR_PAYREDUCE (COMPANY_CODE, WORKER_CODE, PAYREDUCE_PAYDATE, REDUCE_CODE, PAYREDUCE_AMOUNT)
			VALUES(@company_code, @worker_code, @task_paydate, 'PF', @reduct_pf)

			INSERT INTO PAY_TR_PAYREDUCE (COMPANY_CODE, WORKER_CODE, PAYREDUCE_PAYDATE, REDUCE_CODE, PAYREDUCE_AMOUNT)
			VALUES(@company_code, @worker_code, @task_paydate, 'RMF', @reduct_rmf)

			INSERT INTO PAY_TR_PAYREDUCE (COMPANY_CODE, WORKER_CODE, PAYREDUCE_PAYDATE, REDUCE_CODE, PAYREDUCE_AMOUNT)
			VALUES(@company_code, @worker_code, @task_paydate, 'SSF', @reduct_ssf)
						
			SET @count_success = @count_success + 1

			-- Next worker
			FETCH NEXT FROM cur_whose INTO @worker_code
		END 
	CLOSE cur_whose 
	DEALLOCATE cur_whose

	-- Update task
	UPDATE SYS_MT_TASK SET TASK_START = @task_start, TASK_END = getdate(), TASK_STATUS = 'F', TASK_NOTE = 'Success : ' + CAST(@count_success AS varchar(30))
	WHERE COMPANY_CODE = @company_code AND TASK_ID = @task_id


END

GO
